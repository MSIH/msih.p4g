@using msih.p4g.Client.Common.Services
@using msih.p4g.Server.Features.Base.UserService.Models
@inject AuthorizationService AuthorizationService
@inherits LayoutComponentBase

<style>
    .admin-layout .top-row {
        width: 100vw;
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1000;
        box-sizing: border-box;
        background-color: #f7f7f7;
        border-bottom: 1px solid #d6d5d5;
        height: 3.5rem;
        display: flex;
        align-items: center;
        justify-content: flex-end;
    }
    
    .admin-layout .content {
        max-width: 100%;
        overflow-x: auto;
    }
    
    .admin-layout .table-responsive {
        margin: 0;
        padding: 0;
    }

    .admin-layout main {
        margin-top: 3.5rem; /* Ensure main content starts below the fixed header */
    }
</style>

@if (isAuthorized)
{
    <div class="page admin-layout">
        <div class="top-row px-4">
            <UserMenu />
        </div>
        
        <main>
            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>
    <Footer />
}
else if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Checking permissions...</span>
        </div>
    </div>
}

@code {
    private bool isAuthorized = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isAuthorized = await AuthorizationService.AdminAccessOnlyAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking admin authorization: {ex.Message}");
            isAuthorized = false;
        }
        finally
        {
            isLoading = false;
        }
    }
}
