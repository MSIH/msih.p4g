@*
 * Copyright (c) 2025 MSIH LLC. All rights reserved.
 * This file is developed for Make Sure It Happens Inc.
 * Unauthorized copying, modification, distribution, or use is prohibited.
*@

@namespace msih.p4g.Client.Common.Components
@using msih.p4g.Shared.Models

<!-- Pagination Component -->
<nav aria-label="Page navigation" class="d-flex justify-content-between align-items-center">
    <div class="pagination-info">
        <small class="text-muted">
            Showing @(Math.Min(StartItem, PagedResult.TotalCount)) to @(Math.Min(EndItem, PagedResult.TotalCount)) of @PagedResult.TotalCount entries
        </small>
    </div>

    @if (PagedResult.TotalPages > 1)
    {
        <ul class="pagination mb-0">
            <!-- Previous Button -->
            <li class="page-item @(PagedResult.HasPreviousPage ? "" : "disabled")">
                <button class="page-link" @onclick="() => OnPageChanged(PagedResult.PageNumber - 1)" 
                        disabled="@(!PagedResult.HasPreviousPage)">
                    <span aria-hidden="true">&laquo;</span>
                    <span class="sr-only">Previous</span>
                </button>
            </li>

            <!-- Page Numbers -->
            @foreach (var pageNum in GetVisiblePages())
            {
                <li class="page-item @(pageNum == PagedResult.PageNumber ? "active" : "")">
                    <button class="page-link" @onclick="() => OnPageChanged(pageNum)">
                        @pageNum
                    </button>
                </li>
            }

            <!-- Next Button -->
            <li class="page-item @(PagedResult.HasNextPage ? "" : "disabled")">
                <button class="page-link" @onclick="() => OnPageChanged(PagedResult.PageNumber + 1)" 
                        disabled="@(!PagedResult.HasNextPage)">
                    <span aria-hidden="true">&raquo;</span>
                    <span class="sr-only">Next</span>
                </button>
            </li>
        </ul>
    }

    <div class="page-size-selector">
        <div class="d-flex align-items-center">
            <label class="form-label me-2 mb-0">
                <small>Show:</small>
            </label>
            <select class="form-select form-select-sm" style="width: auto;" 
                    value="@PagedResult.PageSize" @onchange="OnPageSizeChanged">
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="25">25</option>
                <option value="50">50</option>
            </select>
        </div>
    </div>
</nav>

@code {
    [Parameter, EditorRequired] public PagedResult<object> PagedResult { get; set; } = new();
    [Parameter] public EventCallback<int> OnPageChange { get; set; }
    [Parameter] public EventCallback<int> OnPageSizeChange { get; set; }
    [Parameter] public int MaxVisiblePages { get; set; } = 5;

    private int StartItem => (PagedResult.PageNumber - 1) * PagedResult.PageSize + 1;
    private int EndItem => PagedResult.PageNumber * PagedResult.PageSize;

    private async Task OnPageChanged(int pageNumber)
    {
        if (pageNumber != PagedResult.PageNumber && pageNumber >= 1 && pageNumber <= PagedResult.TotalPages)
        {
            await OnPageChange.InvokeAsync(pageNumber);
        }
    }

    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newPageSize))
        {
            await OnPageSizeChange.InvokeAsync(newPageSize);
        }
    }

    private IEnumerable<int> GetVisiblePages()
    {
        var totalPages = PagedResult.TotalPages;
        var currentPage = PagedResult.PageNumber;
        var maxVisible = Math.Min(MaxVisiblePages, totalPages);

        var startPage = Math.Max(1, currentPage - maxVisible / 2);
        var endPage = Math.Min(totalPages, startPage + maxVisible - 1);

        // Adjust start if we're near the end
        if (endPage - startPage + 1 < maxVisible)
        {
            startPage = Math.Max(1, endPage - maxVisible + 1);
        }

        return Enumerable.Range(startPage, endPage - startPage + 1);
    }
}