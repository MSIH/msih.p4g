@using Microsoft.JSInterop
@using msih.p4g.Server.Features.Base.SettingsService.Interfaces
@using msih.p4g.Server.Features.Base.ProfileService.Model
@using msih.p4g.Server.Common.Utilities
@using msih.p4g.Server.Features.CampaignService.Model
@using msih.p4g.Client.Features.Campaign.Components
@inject IJSRuntime JSRuntime
@inject ISettingsService SettingsService

<div class="mb-3">
    <h5 class="mt-2 mb-3">@GeneratedReferralLink</h5>

@if (ShowAppendNameOption)
{
        <div class="mb-3">
            <label class="form-check-label">
                <input type="checkbox" @bind="appendName" @bind:after="UpdateReferralLinkAsync" class="form-check-input me-2" />
                Append my name to the referral code
            </label>
        </div>
}

@if (ShowCampaignDropdownOption)
{
    <div class="mb-3">
        <label class="form-label">Campaign (Optional):</label>
        <CampaignDropdown Campaigns="Campaigns" 
                         SelectedCampaignId="SelectedCampaignId" 
                         SelectedCampaignIdChanged="OnCampaignChangedAsync" />
    </div>
}


            <div class="mb-3">
                <button class="btn btn-sm btn-secondary" @onclick="CopyReferralUrlToClipboard">
                    <span class="oi oi-clipboard me-1"></span> Copy URL to Clipboard
                </button>
                @if (copyUrlSuccess)
                {
                    <span class="text-success ms-2">Copied!</span>
                }
            </div>
    </div>

    @if (ShowSocialMediaLinks)
    {
        <div class="mb-3">
            <strong>Share your code:</strong>
            <ul class="mt-2">
                <li><a href="@InstagramUrl" target="_blank">Instagram</a></li>
                <li><a href="@TikTokUrl" target="_blank">TikTok</a></li>
                <li><a href="@FacebookUrl" target="_blank">Facebook</a></li>
                <li><a href="@TwitterUrl" target="_blank">Twitter</a></li>
                <li><a href="mailto:?subject=Join%20me&body=@GeneratedReferralLink" target="_blank">Email</a></li>
                <li><a href="sms:?body=@GeneratedReferralLink" target="_blank">Text Message</a></li>
            </ul>
        </div>
    }

@code {

    /// <summary>
    /// The user profile containing first and last name for generating the personalized referral link.
    /// When provided, the component will compute the username format as "{FirstName}"
    /// (e.g., "John") to ensure consistency across the application.
    /// </summary>
    [Parameter] public Profile? Profile { get; set; }

    /// <summary>
    /// [DEPRECATED] Use Profile parameter instead.
    /// The user's name to append when appendName is enabled.
    /// This parameter is maintained for backward compatibility but should not be used in new code.
    /// </summary>
    [Parameter] public string UserName { get; set; } = string.Empty;

    /// <summary>
    /// Whether to show the checkbox option to append name
    /// </summary>
    [Parameter] public bool ShowAppendNameOption { get; set; } = true;

    /// <summary>
    /// Whether to show the campaign dropdown option
    /// </summary>
    [Parameter] public bool ShowCampaignDropdownOption { get; set; } = true;

    /// <summary>
    /// Whether to show the social media sharing links
    /// </summary>
    [Parameter] public bool ShowSocialMediaLinks { get; set; } = false;

    /// <summary>
    /// Event callback fired when an error occurs (e.g., clipboard copy fails)
    /// </summary>
    [Parameter] public EventCallback<string> OnError { get; set; }

    /// <summary>
    /// Event callback fired when URL is successfully copied
    /// </summary>
    [Parameter] public EventCallback OnUrlCopied { get; set; }

    /// <summary>
    /// List of campaigns for the dropdown
    /// </summary>
    [Parameter] public List<Campaign> Campaigns { get; set; } = new();

    /// <summary>
    /// Currently selected campaign ID
    /// </summary>
    [Parameter] public int? SelectedCampaignId { get; set; }

    /// <summary>
    /// Event callback fired when campaign selection changes
    /// </summary>
    [Parameter] public EventCallback<int?> SelectedCampaignIdChanged { get; set; }

    private bool _appendName = false;
    private bool appendName
    {
        get => _appendName;
        set
        {
            _appendName = value;
            StateHasChanged();
        }
    }

    [Parameter] public string ReferralCode { get; set; } = string.Empty;

    private bool copyUrlSuccess = false;
    private string _generatedReferralLink = string.Empty;

    /// <summary>
    /// Computes the consistent username format from the Profile object.
    /// Format: "{FirstName}" (e.g., "John")
    /// </summary>
    private string ComputedUserName
    {
        get
        {
            var username = ReferralLinkHelper.ComputeUsername(Profile);

            // Fallback to UserName parameter for backward compatibility
            return !string.IsNullOrEmpty(username) ? username : UserName;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Ensure the referral code is generated if not already set
        if (Profile != null && !string.IsNullOrEmpty(Profile.ReferralCode))
        {
            ReferralCode = Profile.ReferralCode;
        }

        // Generate the referral link
        await UpdateReferralLinkAsync();
    }

    /// <summary>
    /// Gets the generated referral link based on current settings
    /// </summary>
    private string GeneratedReferralLink => _generatedReferralLink;

    /// <summary>
    /// Updates the referral link using the new async helper method
    /// </summary>
    private async Task UpdateReferralLinkAsync()
    {
        _generatedReferralLink = await ReferralLinkHelper.GenerateReferralLinkAsync(Profile, appendName: appendName, campaignId: SelectedCampaignId);
        StateHasChanged();
    }

    /// <summary>
    /// Handles campaign selection change
    /// </summary>
    private async Task OnCampaignChangedAsync(int? campaignId)
    {
        SelectedCampaignId = campaignId;
        await SelectedCampaignIdChanged.InvokeAsync(campaignId);
        await UpdateReferralLinkAsync();
    }

    /// <summary>
    /// Social media sharing URLs
    /// </summary>
    private string InstagramUrl => $"https://www.instagram.com/?url={Uri.EscapeDataString(GeneratedReferralLink)}";
    private string TikTokUrl => $"https://www.tiktok.com/share?url={Uri.EscapeDataString(GeneratedReferralLink)}";
    private string FacebookUrl =>
    $"https://www.facebook.com/sharer/sharer.php?u={Uri.EscapeDataString(GeneratedReferralLink)}";
    private string TwitterUrl => $"https://twitter.com/intent/tweet?url={Uri.EscapeDataString(GeneratedReferralLink)}";

    /// <summary>
    /// Copies the referral URL to clipboard
    /// </summary>
    private async Task CopyReferralUrlToClipboard()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", GeneratedReferralLink);
            copyUrlSuccess = true;
            StateHasChanged();

            // Trigger success callback
            if (OnUrlCopied.HasDelegate)
            {
                await OnUrlCopied.InvokeAsync();
            }

            // Reset the success message after 3 seconds
            await Task.Delay(3000);
            copyUrlSuccess = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle clipboard error
            var errorMessage = "Unable to copy to clipboard. Please select and copy the URL manually.";

            if (OnError.HasDelegate)
            {
                await OnError.InvokeAsync(errorMessage);
            }
        }
    }
}
