@* 
 * Copyright (c) 2025 MSIH LLC. All rights reserved.
 * This file is developed for Make Sure It Happens Inc.
 * Unauthorized copying, modification, distribution, or use is prohibited.
 *@

@page "/sms"
@using msih.p4g.Server.Features.Base.SmsService.Interfaces
@inject ISmsService SmsService
@inject ILogger<SendSMS> Logger

<h3>Send SMS Message</h3>

<div class="row">
    <div class="col-md-6">
        <div class="form-group mb-3">
            <label for="to">To Phone Number (E.164 format, e.g., +12345678900):</label>
            <input id="to" type="text" class="form-control" @bind="request.To" />
        </div>
        <div class="form-group mb-3">
            <label for="from">From Phone Number (optional):</label>
            <input id="from" type="text" class="form-control" @bind="request.From" />
        </div>
        <div class="form-group mb-3">
            <label for="message">Message:</label>
            <textarea id="message" class="form-control" rows="4" @bind="request.Message"></textarea>
        </div>
        <button class="btn btn-primary" @onclick="SendMessage" disabled="@isSending">
            @if (isSending)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span> Sending...</span>
            }
            else
            {
                <span>Send SMS</span>
            }
        </button>
    </div>
</div>

@if (!string.IsNullOrEmpty(message))
{
    <div class="mt-3 alert @alertClass">
        @message
    </div>
}

@code {
    private SendSMSRequest request = new();
    private bool isSending;
    private string message = "";
    private string alertClass = "";

    private class SendSMSRequest
    {
        public string To { get; set; } = "";
        public string? From { get; set; }
        public string Message { get; set; } = "";
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(request.To) || string.IsNullOrWhiteSpace(request.Message))
        {
            message = "Phone number and message are required.";
            alertClass = "alert-danger";
            return;
        }

        try
        {
            isSending = true;
            
            if (!SmsService.IsValidPhoneNumber(request.To))
            {
                message = "Invalid phone number format. Must be in E.164 format (e.g., +12125551234)";
                alertClass = "alert-danger";
                return;
            }

            // Call the ISmsService directly
            await SmsService.SendSmsAsync(request.To, request.Message);
            
            message = "SMS sent successfully!";
            alertClass = "alert-success";
            request = new SendSMSRequest();
        }
        catch (Exception ex)
        {
            message = $"An error occurred while sending the SMS: {ex.Message}";
            alertClass = "alert-danger";
            Logger.LogError(ex, "Error sending SMS");
        }
        finally
        {
            isSending = false;
        }
    }
}
