@page "/verify-email"
@namespace msih.p4g.Client.Features.Authentication.Pages
@using msih.p4g.Client.Features.Authentication.Services
@using msih.p4g.Server.Features.Base.UserService.Interfaces
@using System.ComponentModel.DataAnnotations
@inject IEmailVerificationService EmailVerificationService
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject IUserService UserService
@implements IDisposable

<PageTitle>Verify Email</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm mt-5">
                <div class="card-header bg-primary text-white">
                    <h3 class="card-title mb-0">Email Verification</h3>
                </div>
                <div class="card-body text-center">
                    @if (isVerifying)
                    {
                        <div class="my-4">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Verifying...</span>
                            </div>
                            <p class="mt-3">Verifying your email address...</p>
                        </div>
                    }
                    else if (isVerified)
                    {
                        <div class="my-4">
                            <div class="text-success mb-3">
                                <i class="bi bi-check-circle" style="font-size: 3rem;"></i>
                            </div>
                            <h4 class="text-success">Email Verified Successfully</h4>
                            <p class="mt-3">Your email has been verified. You will be redirected to the profile page in @redirectCountdown seconds.</p>
                        </div>
                    }
                    else
                    {
                        <div class="my-4">
                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="text-danger mb-3">
                                    <i class="bi bi-x-circle" style="font-size: 3rem;"></i>
                                </div>
                                <h4 class="text-danger">Verification Failed</h4>
                                <p class="mt-3">@errorMessage</p>
                            }

                            <div class="mt-4">
                                <h5>Check Your Email</h5>
                                <p>We've sent a verification code to your email address. Please check your email (including spam folder) and enter the code below:</p>

                                <EditForm Model="@verificationModel" OnValidSubmit="HandleManualVerification" class="mt-3">
                                    <DataAnnotationsValidator />

                                    <div class="form-group mb-3">
                                        <div class="input-group">
                                            <InputText @bind-Value="verificationModel.Token" class="form-control" placeholder="Enter verification code" autocomplete="one-time-code" />
                                            <button type="submit" class="btn btn-primary" disabled="@isProcessingManualVerification">
                                                @if (isProcessingManualVerification)
                                                {
                                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                                    <span> Verifying...</span>
                                                }
                                                else
                                                {
                                                    <span>Verify</span>
                                                }
                                            </button>
                                        </div>
                                        <ValidationMessage For="@(() => verificationModel.Token)" class="text-danger d-block mt-1" />
                                    </div>
                                </EditForm>

                                <div class="mt-3">
                                    <a href="/login" class="btn btn-outline-primary">Return to Login</a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    private bool isVerifying = false;
    private bool isVerified = false;
    private bool isProcessingManualVerification = false;
    private string errorMessage = string.Empty;
    private int redirectCountdown = 5;
    private System.Threading.Timer? redirectTimer;
    private VerificationModel verificationModel = new();

    private class VerificationModel
    {
        [Required(ErrorMessage = "Verification code is required")]
        [StringLength(50, ErrorMessage = "Code is too long")]
        public string Token { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        // Get the token from the URL
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
        {
            isVerifying = true;
            await VerifyEmailAsync(token);
        }
        // Otherwise show the manual verification form
    }

    private async Task HandleManualVerification()
    {
        if (string.IsNullOrWhiteSpace(verificationModel.Token))
            return;

        isProcessingManualVerification = true;
        await VerifyEmailAsync(verificationModel.Token);
        isProcessingManualVerification = false;
    }

    private async Task VerifyEmailAsync(string token)
    {
        try
        {
            isVerifying = true;
            errorMessage = string.Empty;
            
            isVerified = await EmailVerificationService.VerifyEmailAsync(token);
            
            if (isVerified)
            {
                // Get the user by token and log them in
                var user = await UserService.GetUserByTokenAsync(token);
                if (user != null)
                {
                    StateHasChanged();
                    await AuthService.LoginAsync(user);
                

                }
                
                StartRedirectCountdown();
            }
            else
            {
                errorMessage = "We couldn't verify your email. The verification code may have expired or is invalid.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isVerifying = false;
        }
    }
    
    private void StartRedirectCountdown()
    {
        redirectTimer = new System.Threading.Timer(async _ =>
        {
            redirectCountdown--;
            await InvokeAsync(StateHasChanged);

            if (redirectCountdown <= 0)
            {
                redirectTimer?.Dispose();
                await InvokeAsync(() => NavigationManager.NavigateTo("/profile"));
            }
        }, null, 0, 1000);
    }

    public void Dispose()
    {
        // Clean up the timer when component is disposed
        redirectTimer?.Dispose();
    }
}
