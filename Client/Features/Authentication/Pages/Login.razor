@*
 * Copyright (c) 2025 MSIH LLC. All rights reserved.
 * This file is developed for Make Sure It Happens Inc.
 * Unauthorized copying, modification, distribution, or use is prohibited.
 *@

@page "/login"
@namespace msih.p4g.Client.Features.Authentication.Pages
@using MSIH.Core.Services.Users.Interfaces
@using MSIH.Core.Services.Users.Models
@using msih.p4g.Client.Features.Authentication.Services
@using System.ComponentModel.DataAnnotations
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<PageTitle>Login</PageTitle>


<div class="container login-page">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm mt-5">
                <div class="card-header bg-primary text-white">
                    <h3 class="card-title mb-0">Login</h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success" role="alert">
                            @successMessage
                        </div>
                    }

                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label for="email" class="form-label">We'll send you a login code to verify your email
                                address</label>
                            <InputText id="email" @bind-Value="loginModel.Email" class="form-control"
                                placeholder="Enter your email address" />
                            <ValidationMessage For="@(() => loginModel.Email)" />
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isLoggingIn">
                                @if (isLoggingIn)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> Sending login link...</span>
                                }
                                else
                                {
                                    <span>Send Login Link</span>
                                }
                            </button>
                        </div>
                    </EditForm>

                    <div class="mt-3 text-center">
                        <p>Don't have an account? <a href="/register">Register</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoggingIn = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    private class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        // If user is already authenticated, redirect to home page
        if (await AuthService.GetCurrentUserAsync() != null)
        {
            NavigationManager.NavigateTo("/");
        }

        // Check for email verification token in the URL
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
        {
            await HandleLoginWithToken(token);
        }
    }

    private async Task HandleLogin()
    {
        isLoggingIn = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            // Request login email with verification link if needed
            var (success, message) = await AuthService.RequestLoginEmailAsync(loginModel.Email);

            if (success)
            {
                successMessage = message;
            }
            else
            {
                errorMessage = message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoggingIn = false;
            // StateHasChanged();
            // // wait two seconds
            // await Task.Delay(2000);

            // If login was successful, we could redirect the user here
            if (!string.IsNullOrEmpty(successMessage))
            {
                // No immediate redirect for now, letting user see the message
                NavigationManager.NavigateTo("/verify-email");
            }
        }
    }

    private async Task HandleLoginWithToken(string token)
    {
        // This would validate the login token and authenticate the user
        // For the MVP, this is a placeholder

        // In a real implementation, you would:
        // 1. Validate the token
        // 2. Find the associated user
        // 3. Log them in

        // For demo purposes, just show a message
        successMessage = "Login successful via email link!";
    }
}
