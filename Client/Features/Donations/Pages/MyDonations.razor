@*
 * Copyright (c) 2025 MSIH LLC. All rights reserved.
 * This file is developed for Make Sure It Happens Inc.
 * Unauthorized copying, modification, distribution, or use is prohibited.
*@

@page "/donations"
@namespace msih.p4g.Client.Features.Donations.Pages
@using msih.p4g.Client.Features.Donations.Components
@using msih.p4g.Client.Features.Authentication.Services
@using msih.p4g.Server.Features.DonationService.Interfaces
@using msih.p4g.Shared.Dtos
@inject IDonationService DonationService
@inject AuthService AuthService
@inject IJSRuntime JSRuntime

<PageTitle>My Donations</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="mb-0">My Donations</h2>
            </div>


            <!-- Donation History Component -->
            <DonationHistoryComponent ShowSummary="true" 
                                    ShowActions="true" 
                                    OnDonationClick="ViewDonation" />

        </div>
    </div>
</div>

<!-- Edit Donation Modal -->
<EditDonationModal Donation="selectedDonation"
                   IsVisible="showEditModal"
                   OnClose="CloseEditModal"
                   OnSave="SaveDonation"
                   OnCancel="CancelDonation" />

@code {

    private bool showEditModal = false;
    private DonationDto? selectedDonation = null;


    private void ViewDonation(DonationDto donation)
    {
        selectedDonation = donation;
        showEditModal = true;
        StateHasChanged();
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        selectedDonation = null;
        StateHasChanged();
    }

    private async Task SaveDonation(DonationDto donation)
    {
        try
        {
            if (AuthService.IsAuthenticated && !string.IsNullOrEmpty(AuthService.CurrentUser?.Email))
            {
                var success = await DonationService.UpdateRecurringDonationAsync(
                    AuthService.CurrentUser.Email,
                    donation.Id,
                    donation.DonationAmount,
                    donation.IsActive);

                if (success)
                {
                    CloseEditModal();
                    await JSRuntime.InvokeVoidAsync("alert", "Donation updated successfully!");
                    
                    // Refresh the component by triggering a reload
                    StateHasChanged();
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Failed to update donation. Please try again.");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving donation: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while updating the donation.");
        }
    }

    private async Task CancelDonation(int donationId)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
                "Are you sure you want to cancel this recurring donation? This action cannot be undone.");

            if (confirmed)
            {
                if (AuthService.IsAuthenticated && !string.IsNullOrEmpty(AuthService.CurrentUser?.Email))
                {
                    var success = await DonationService.CancelRecurringDonationAsync(AuthService.CurrentUser.Email, donationId);

                    if (success)
                    {
                        CloseEditModal();
                        await JSRuntime.InvokeVoidAsync("alert", "Recurring donation cancelled successfully!");
                        
                        // Refresh the component by triggering a reload
                        StateHasChanged();
                    }
                    else
                    {
                        await JSRuntime.InvokeVoidAsync("alert", "Failed to cancel donation. Please try again.");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error canceling donation: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while canceling the donation.");
        }
    }
}
