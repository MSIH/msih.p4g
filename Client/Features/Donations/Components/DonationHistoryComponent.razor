@*
 * Copyright (c) 2025 MSIH LLC. All rights reserved.
 * This file is developed for Make Sure It Happens Inc.
 * Unauthorized copying, modification, distribution, or use is prohibited.
*@

@namespace msih.p4g.Client.Features.Donations.Components
@using msih.p4g.Client.Features.Authentication.Services
@using msih.p4g.Client.Common.Components
@using msih.p4g.Server.Features.DonationService.Interfaces
@using msih.p4g.Server.Features.DonationService.Models
@using msih.p4g.Shared.Dtos
@using msih.p4g.Shared.Models
@inject IDonationService DonationService
@inject AuthService AuthService
@inject IJSRuntime JSRuntime

<!-- Search and Filter Section -->
<div class="row mb-4">
    <div class="col-md-6">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search donations..."
                   @bind="searchTerm" @bind:event="oninput" @onkeypress="OnSearchKeyPress" />
            <button class="btn btn-outline-secondary" type="button" @onclick="SearchDonations">
                <span class="oi oi-magnifying-glass"></span>
            </button>
        </div>
    </div>
    <div class="col-md-6">
        <select class="form-select" @bind="filterType" @bind:after="FilterChanged">
            <option value="all">All Donations</option>
            <option value="onetime">One-time</option>
            <option value="monthly">Monthly</option>
            <option value="annual">Annual</option>
            <option value="recurring">All Recurring</option>
        </select>
    </div>
</div>

@if (isLoading)
{
    <!-- Loading State -->
    <div class="d-flex justify-content-center p-4">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (pagedDonations?.Items == null || !pagedDonations.Items.Any())
{
    <!-- No Donations Message -->
    <div class="text-center p-5">
        <span class="oi oi-heart display-1 text-muted mb-3"></span>
        <h4 class="text-muted">No donations found</h4>
        <p class="text-muted">
            @if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                <span>No donations match your search criteria.</span>
            }
            else
            {
                <span>You haven't made any donations yet.</span>
            }
        </p>
    </div>
}
else
{
    <!-- Summary Cards -->
    @if (ShowSummary)
    {
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title text-primary">@pagedDonations.TotalCount</h5>
                        <p class="card-text text-muted">Total Donations</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title text-success">$@totalAmount.ToString("F2")</h5>
                        <p class="card-text text-muted">Total Donated</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title text-info">@monthlyCount</h5>
                        <p class="card-text text-muted">Monthly Donations</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title text-warning">@annualCount</h5>
                        <p class="card-text text-muted">Annual Donations</p>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Donations Table -->
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Amount</th>
                            <th>Type</th>
                            <th>Campaign</th>
                            <th>Status</th>
                            @if (ShowActions)
                            {
                                <th>Actions</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var donation in ConvertToDto(pagedDonations.Items.ToList()).OrderByDescending(d => d.CreatedOn))
                        {
                            <tr>
                                <td>@donation.CreatedOn.ToString("MMM dd, yyyy")</td>
                                <td>
                                    <strong>$@donation.DonationAmount.ToString("F2")</strong>
                                    @if (donation.PayTransactionFee)
                                    {
                                        <br />
                                        <small class="text-muted">Total: $@donation.TotalAmount.ToString("F2")</small>
                                    }
                                </td>
                                <td>
                                    <span class="badge @GetRecurrenceBadgeClass(donation)">
                                        @donation.RecurrenceType
                                    </span>
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(donation.CampaignCode))
                                    {
                                        <span class="badge bg-light text-dark">@donation.CampaignCode</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">General</span>
                                    }
                                </td>
                                <td>
                                    @if (donation.IsMonthly || donation.IsAnnual)
                                    {
                                        <span class="badge @(donation.IsActive ? "bg-success" : "bg-secondary")">
                                            @(donation.IsActive ? "Active" : "Paused")
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-info">Completed</span>
                                    }
                                </td>
                                @if (ShowActions)
                                {
                                    <td>
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewDonation(donation)">
                                            @if (donation.IsMonthly || donation.IsAnnual)
                                            {
                                                <span>Edit</span>
                                            }
                                            else
                                            {
                                                <span>View</span>
                                            }
                                        </button>
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div class="mt-3">
                <PaginationComponent PagedResult="@CreateGenericPagedResult()" 
                                   OnPageChange="OnPageChanged" 
                                   OnPageSizeChange="OnPageSizeChanged" />
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool ShowSummary { get; set; } = true;
    [Parameter] public bool ShowActions { get; set; } = true;
    [Parameter] public EventCallback<DonationDto> OnDonationClick { get; set; }

    private PagedResult<Donation> pagedDonations = new();
    private string searchTerm = string.Empty;
    private string filterType = "all";
    private bool isLoading = true;
    private int currentPage = 1;
    private int pageSize = 10;

    // Summary statistics
    private decimal totalAmount = 0;
    private int monthlyCount = 0;
    private int annualCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadDonations();
    }

    private async Task LoadDonations()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            if (AuthService.IsAuthenticated && !string.IsNullOrEmpty(AuthService.CurrentUser?.Email))
            {
                var parameters = new PaginationParameters
                {
                    PageNumber = currentPage,
                    PageSize = pageSize,
                    SearchTerm = string.IsNullOrWhiteSpace(searchTerm) ? null : searchTerm,
                    FilterType = filterType == "all" ? null : filterType
                };

                if (string.IsNullOrWhiteSpace(searchTerm))
                {
                    pagedDonations = await DonationService.GetPagedByUserEmailAsync(AuthService.CurrentUser.Email, parameters);
                }
                else
                {
                    pagedDonations = await DonationService.SearchPagedByUserEmailAsync(AuthService.CurrentUser.Email, parameters);
                }

                await LoadSummaryStatistics();
            }
            else
            {
                pagedDonations = new PagedResult<Donation> { Items = new List<Donation>() };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading donations: {ex.Message}");
            pagedDonations = new PagedResult<Donation> { Items = new List<Donation>() };
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadSummaryStatistics()
    {
        try
        {
            if (AuthService.IsAuthenticated && !string.IsNullOrEmpty(AuthService.CurrentUser?.Email))
            {
                // Load all donations for summary (not paginated)
                var allDonations = await DonationService.GetByUserEmailAsync(AuthService.CurrentUser.Email);
                var donationDtos = ConvertToDto(allDonations);

                totalAmount = donationDtos.Sum(d => d.DonationAmount);
                monthlyCount = donationDtos.Count(d => d.IsMonthly);
                annualCount = donationDtos.Count(d => d.IsAnnual);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading summary statistics: {ex.Message}");
        }
    }

    private async Task SearchDonations()
    {
        currentPage = 1; // Reset to first page
        await LoadDonations();
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchDonations();
        }
    }

    private async Task FilterChanged()
    {
        currentPage = 1; // Reset to first page
        await LoadDonations();
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadDonations();
    }

    private async Task OnPageSizeChanged(int size)
    {
        pageSize = size;
        currentPage = 1; // Reset to first page
        await LoadDonations();
    }

    private async Task ViewDonation(DonationDto donation)
    {
        await OnDonationClick.InvokeAsync(donation);
    }

    private string GetRecurrenceBadgeClass(DonationDto donation)
    {
        if (donation.IsMonthly) return "bg-primary";
        if (donation.IsAnnual) return "bg-success";
        return "bg-secondary";
    }

    private List<DonationDto> ConvertToDto(List<Donation> serverDonations)
    {
        return serverDonations.Select(d => new DonationDto
        {
            Id = d.Id,
            DonationAmount = d.DonationAmount,
            PayTransactionFee = d.PayTransactionFee,
            PayTransactionFeeAmount = d.PayTransactionFeeAmount,
            IsMonthly = d.IsMonthly,
            IsAnnual = d.IsAnnual,
            DonationMessage = d.DonationMessage,
            ReferralCode = d.ReferralCode,
            CampaignCode = d.CampaignCode,
            CampaignName = d.Campaign?.Title,
            CreatedOn = d.CreatedOn,
            IsActive = d.IsActive
        }).ToList();
    }

    private PagedResult<object> CreateGenericPagedResult()
    {
        return new PagedResult<object>
        {
            Items = pagedDonations.Items.Cast<object>().ToList(),
            TotalCount = pagedDonations.TotalCount,
            PageNumber = pagedDonations.PageNumber,
            PageSize = pagedDonations.PageSize
        };
    }
}