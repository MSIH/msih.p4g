@page "/admin/donors"
@layout AdminLayout
@using msih.p4g.Client.Layout.Components

@using msih.p4g.Server.Features.DonorService.Interfaces
@using msih.p4g.Server.Features.DonorService.Model
@inject IDonorService DonorService
@inject IJSRuntime JSRuntime
@inject AuthorizationService AuthorizationService

<h3>Donor Management</h3>

<div class="mb-3">
    <input class="form-control" placeholder="Search donors..." @bind="searchTerm" @bind:event="oninput" />
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <button class="btn btn-primary mb-2" @onclick="ShowAddModal">Add Donor</button>
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>UserId</th>
                    <th>PaymentProcessorDonorId</th>
                    <th>Active</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var donor in filteredDonors)
                {
                    <tr>
                        <td>@donor.UserId</td>
                        <td>@donor.PaymentProcessorDonorId</td>
                        <td>
                            <input type="checkbox" checked="@donor.IsActive" @onchange="e => ToggleActive(donor, (bool)e.Value)" />
                        </td>
                        <td>
                            <button class="btn btn-sm btn-success me-1" @onclick="() => SaveDonor(donor)">Save</button>
                            <button class="btn btn-sm btn-primary me-1" @onclick="() => EditDonor(donor)">Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDeactivate(donor)">Deactivate</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Donor> donors = new();
    private string searchTerm = string.Empty;
    private bool isLoading = true;
    private bool showModal = false;
    private bool showDeactivateModal = false;
    private Donor? editingDonor;
    private Donor? deactivatingDonor;

    private IEnumerable<Donor> filteredDonors => string.IsNullOrWhiteSpace(searchTerm)
        ? donors
        : donors.Where(d => d.PaymentProcessorDonorId?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false);

    protected override async Task OnInitializedAsync()
    {
    
        await LoadDonors();
    }

    private async Task LoadDonors()
    {
        isLoading = true;
        donors = await DonorService.GetAllAsync();
        isLoading = false;
        StateHasChanged();
    }

    private void ShowAddModal()
    {
        editingDonor = new Donor();
        showModal = true;
    }

    private void EditDonor(Donor donor)
    {
        editingDonor = new Donor
        {
            Id = donor.Id,
            UserId = donor.UserId,
            PaymentProcessorDonorId = donor.PaymentProcessorDonorId
        };
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        editingDonor = null;
    }

    private async Task SaveDonor()
    {
        if (editingDonor != null)
        {
            if (editingDonor.Id == 0)
            {
                await DonorService.AddAsync(editingDonor);
            }
            else
            {
                await DonorService.UpdateAsync(editingDonor);
            }
            showModal = false;
            await LoadDonors();
        }
    }

    private async Task SaveDonor(Donor donor)
    {
        await DonorService.UpdateAsync(donor);
        await LoadDonors();
    }

    private async Task ToggleActive(Donor donor, bool isActive)
    {
        await DonorService.SetActiveAsync(donor.Id, isActive);
        donor.IsActive = isActive;
        StateHasChanged();
    }

    private void ConfirmDeactivate(Donor donor)
    {
        deactivatingDonor = donor;
        showDeactivateModal = true;
    }

    private void CloseDeactivateModal()
    {
        showDeactivateModal = false;
        deactivatingDonor = null;
    }

    private async Task DeactivateDonor()
    {
        if (deactivatingDonor != null)
        {
            await DonorService.SetActiveAsync(deactivatingDonor.Id, false);
            showDeactivateModal = false;
            await LoadDonors();
        }
    }
}
