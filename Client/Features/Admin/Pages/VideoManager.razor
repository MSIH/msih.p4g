@* Copyright (c) 2025 MSIH LLC. All rights reserved.
  This file is developed for Make Sure It Happens Inc.
  Unauthorized copying, modification, distribution, or use is prohibited. *@
@page "/admin/videos"
@layout AdminLayout

@using msih.p4g.Server.Features.CampaignService.Model
@using msih.p4g.Server.Features.CampaignService.Interfaces
@using System.Net.Http.Json
@using System.Text.Json
@inject ICampaignService CampaignService
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthorizationService AuthorizationService

<h3>Video Management</h3>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Upload New Video</h5>
            </div>
            <div class="card-body">
                <VideoUploadComponent OnUploadCompleted="OnVideoUploaded" OnUploadFailed="OnVideoUploadFailed" />
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Upload Instructions</h5>
            </div>
            <div class="card-body">
                <ul>
                    <li>Videos are automatically associated with campaigns using the Campaign ID as the filename</li>
                    <li>Supported formats: MP4, MOV, AVI, MKV</li>
                    <li>Maximum file size: 100MB</li>
                    <li>Videos will be used for referral link overlays</li>
                    <li>Uploading a new video for a campaign will replace the existing one</li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="mt-4">
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5>Existing Videos</h5>
            <button class="btn btn-sm btn-outline-primary" @onclick="RefreshVideoList">
                <span class="oi oi-reload me-1"></span> Refresh
            </button>
        </div>
        <div class="card-body">
            @if (isLoadingVideos)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p>Loading videos...</p>
                </div>
            }
            else if (videos.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Campaign ID</th>
                                <th>Campaign Name</th>
                                <th>File Name</th>
                                <th>File Size</th>
                                <th>Created</th>
                                <th>Last Modified</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var video in videos)
                            {
                                <tr>
                                    <td>@video.CampaignId</td>
                                    <td>@GetCampaignName(video.CampaignId)</td>
                                    <td>@video.FileName</td>
                                    <td>@FormatFileSize(video.FileSize)</td>
                                    <td>@video.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>@video.LastModified.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>
                                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteVideo(video.CampaignId)" 
                                                @onclick:preventDefault="true">
                                            <span class="oi oi-trash me-1"></span> Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center text-muted">
                    <p>No videos uploaded yet.</p>
                </div>
            }
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert @(statusMessageType == "success" ? "alert-success" : "alert-danger") mt-3">
        @statusMessage
    </div>
}

@code {
    private List<VideoInfo> videos = new();
    private List<Campaign> campaigns = new();
    private bool isLoadingVideos = false;
    private string statusMessage = string.Empty;
    private string statusMessageType = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCampaigns();
        await LoadVideos();
    }

    private async Task LoadCampaigns()
    {
        try
        {
            campaigns = (await CampaignService.GetAllAsync(includeInactive: true)).ToList();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error loading campaigns: {ex.Message}";
            statusMessageType = "error";
        }
    }

    private async Task LoadVideos()
    {
        try
        {
            isLoadingVideos = true;
            StateHasChanged();

            var response = await Http.GetAsync("api/video/list");
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var videoData = JsonSerializer.Deserialize<List<VideoInfo>>(content, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                videos = videoData ?? new List<VideoInfo>();
            }
            else
            {
                statusMessage = "Failed to load videos";
                statusMessageType = "error";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error loading videos: {ex.Message}";
            statusMessageType = "error";
        }
        finally
        {
            isLoadingVideos = false;
            StateHasChanged();
        }
    }

    private async Task RefreshVideoList()
    {
        await LoadVideos();
        ClearStatusMessage();
    }

    private async Task DeleteVideo(string campaignId)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/video/delete/{campaignId}");
            
            if (response.IsSuccessStatusCode)
            {
                statusMessage = $"Video for campaign {campaignId} deleted successfully";
                statusMessageType = "success";
                await LoadVideos();
            }
            else
            {
                statusMessage = "Failed to delete video";
                statusMessageType = "error";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error deleting video: {ex.Message}";
            statusMessageType = "error";
        }
        
        StateHasChanged();
        await Task.Delay(3000);
        ClearStatusMessage();
    }

    private async Task OnVideoUploaded(int campaignId)
    {
        statusMessage = $"Video uploaded successfully for campaign {campaignId}";
        statusMessageType = "success";
        await LoadVideos();
        StateHasChanged();
        
        await Task.Delay(3000);
        ClearStatusMessage();
    }

    private async Task OnVideoUploadFailed(string error)
    {
        statusMessage = $"Upload failed: {error}";
        statusMessageType = "error";
        StateHasChanged();
        
        await Task.Delay(5000);
        ClearStatusMessage();
    }

    private void ClearStatusMessage()
    {
        statusMessage = string.Empty;
        statusMessageType = string.Empty;
        StateHasChanged();
    }

    private string GetCampaignName(string campaignId)
    {
        if (int.TryParse(campaignId, out int id))
        {
            var campaign = campaigns.FirstOrDefault(c => c.Id == id);
            return campaign?.Title ?? "Unknown Campaign";
        }
        return "Unknown Campaign";
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    private class VideoInfo
    {
        public string FileName { get; set; }
        public string CampaignId { get; set; }
        public string FilePath { get; set; }
        public long FileSize { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime LastModified { get; set; }
    }
}