@page "/payout-tester"
@using msih.p4g.Shared.Models.PayoutService
@using System.ComponentModel.DataAnnotations
@inject ILogger<PayoutTester> Logger
@inject Server.Features.Base.PayoutService.Interfaces.IPayoutService PayoutService

<h1>PayPal/Venmo Payout Tester</h1>

<EditForm Model="payoutModel" OnValidSubmit="HandlePayout">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="fundraiserId" class="form-label">Fundraiser ID</label>
        <InputText id="fundraiserId" class="form-control" @bind-Value="payoutModel.FundraiserId" />
    </div>
    <div class="mb-3">
        <label for="payoutAccount" class="form-label">Payout Account</label>
        <InputText id="payoutAccount" class="form-control" @bind-Value="payoutModel.PayoutAccount" />
    </div>
    <div class="mb-3">
        <label for="accountType" class="form-label">Account Type</label>
        <InputSelect id="accountType" class="form-select" @bind-Value="payoutModel.PayoutAccountType">
            <option value="PayPal">PayPal</option>
            <option value="Venmo">Venmo</option>
        </InputSelect>
    </div>
    <div class="mb-3">
        <label for="accountFormat" class="form-label">Account Format</label>
        <InputSelect id="accountFormat" class="form-select" @bind-Value="payoutModel.PayoutAccountFormat">
            <option value="Email">Email</option>
            <option value="Phone">Mobile</option>
            <option value="Username">Handle</option>
        </InputSelect>
    </div>
    <div class="mb-3">
        <label for="amount" class="form-label">Amount</label>
        <InputNumber id="amount" class="form-control" @bind-Value="payoutModel.Amount" />
    </div>
    <button type="submit" class="btn btn-primary">Make Payment</button>
</EditForm>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info mt-3">@statusMessage</div>
}

@code {
    private PayoutTestModel payoutModel = new();
    private string? statusMessage;

    private async Task HandlePayout()
    {
        statusMessage = null;
        try
        {
            // Map string to enum for AccountType and AccountFormat
            var accountType = payoutModel.PayoutAccountType switch
            {
                "PayPal" => Server.Features.FundraiserService.Model.AccountType.PayPal,
                "Venmo" => Server.Features.FundraiserService.Model.AccountType.Venmo,
                _ => Server.Features.FundraiserService.Model.AccountType.PayPal
            };
            var accountFormat = payoutModel.PayoutAccountFormat switch
            {
                "Email" => Server.Features.FundraiserService.Model.AccountFormat.Email,
                "Phone" => Server.Features.FundraiserService.Model.AccountFormat.Mobile,
                "Username" => Server.Features.FundraiserService.Model.AccountFormat.Handle,
                _ => Server.Features.FundraiserService.Model.AccountFormat.Email
            };

            // 1. Create payout
            payoutModel.FundraiserId = "123";
            var payout = await PayoutService.CreatePayoutAsync(
                payoutModel.FundraiserId,
                payoutModel.PayoutAccount,
                payoutModel.Amount,
                "USD",
                null,
                accountType,
                accountFormat
            );

            // 2. Call batch payout with just this payout
            var batchResult = await PayoutService.ProcessBatchPayoutsAsync(new List<string> { payout.Id.ToString() });
            var processed = batchResult.FirstOrDefault();
            if (processed != null && string.IsNullOrEmpty(processed.ErrorMessage))
            {
                statusMessage = $"Payout processed! BatchId: {processed.PaypalBatchId}, Status: {processed.BatchStatus}";
            }
            else
            {
                statusMessage = $"Payout error: {processed?.ErrorMessage ?? "Unknown error"}";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
        }
    }

    public class PayoutTestModel
    {
        [Required]
        public string FundraiserId { get; set; }
        [Required]
        public string PayoutAccount { get; set; }
        [Required]
        public string PayoutAccountType { get; set; } = "PayPal";
        [Required]
        public string PayoutAccountFormat { get; set; } = "Email";
        [Required]
        [Range(typeof(decimal), "0.01", "79228162514264337593543950335")]
        public decimal Amount { get; set; }
    }
    public class PayoutResult
    {
        public string Id { get; set; }
    }
}
