@*
 * Copyright (c) 2025 MSIH LLC. All rights reserved.
 * This file is developed for Make Sure It Happens Inc.
 * Unauthorized copying, modification, distribution, or use is prohibited.
 *@
@page "/payment/braintree"
@page "/payment/braintree/{CampaignId:int?}"
@page "/payment/braintree/{CampaignId:int?}/{ReferralCode?}"
@page "/d/{CampaignId:int?}"
@page "/d/{ReferralCode?}"
@page "/d/{CampaignId:int?}/{ReferralCode?}"
@page "/give/{ReferralCode}"
@page "/donate/{ReferralCode}"

@using msih.p4g.Server.Features.Base.PaymentService.Interfaces
@using msih.p4g.Server.Features.Base.PaymentService.Models
@using msih.p4g.Server.Features.Base.UserService.Models
@using msih.p4g.Server.Features.CampaignService.Interfaces
@using msih.p4g.Server.Features.CampaignService.Model
@using msih.p4g.Server.Features.Base.ProfileService.Interfaces
@using msih.p4g.Server.Features.Base.ProfileService.Model
@using msih.p4g.Server.Features.DonationService.Models
@using msih.p4g.Server.Features.DonationService.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@using msih.p4g.Server.Features.OrganizationService.Interfaces
@using msih.p4g.Server.Features.OrganizationService.Models
@using msih.p4g.Server.Features.OrganizationService.Services

@inject IPaymentServiceFactory PaymentServiceFactory
@inject ICampaignService CampaignService
@inject IProfileService ProfileService
@inject IDonationService DonationService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IOrganizationService OrganizationService

<div class="container">
    @if (isLoading)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <h2>Donation</h2>

        <div class="row">
            <div class="col-md-8 mx-auto">
                @if (referrer.FirstName != null)
                {
                    <div class="alert alert-info mb-4">
                        <p class="mb-0">You were referred by: <strong>@referrer.FirstName @(referrer.LastName?.Substring(0, 1).ToUpper()).</strong></p>
                    </div>
                }

                @if (campaign != null)
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5>Campaign Information</h5>
                            <p class="mb-0"> @organization.LegalName | Tax Type @organization.OrganizationType | TaxID @organization.TaxId | @organization.Website</p>
                        </div>
                        <div class="card-body">
                            <h4>@campaign.Title</h4>
                            <p class="mb-0">@campaign.Description</p>

                        </div>
                    </div>
                }
                else if (!string.IsNullOrEmpty(campaignError))
                {
                    <div class="alert alert-danger mb-4">
                        @campaignError
                    </div>
                }

                <EditForm Model="@donationRequest" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="card mb-4">
                        <div class="card-header">
                            <h5>Donor Information</h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-3 mb-3">
                                    <label for="firstName" class="form-label">First Name*</label>
                                    <InputText id="firstName" class="form-control" @bind-Value="donationRequest.FirstName" />
                                    <ValidationMessage For="@(() => donationRequest.FirstName)" />
                                </div>
                                <div class="col-md-3 mb-3">
                                    <label for="lastName" class="form-label">Last Name*</label>
                                    <InputText id="lastName" class="form-control" @bind-Value="donationRequest.LastName" />
                                    <ValidationMessage For="@(() => donationRequest.LastName)" />
                                </div>
                                <div class="col-md-4 mb-3">
                                    <label for="email" class="form-label">Email*</label>
                                    <InputText id="email" class="form-control" @bind-Value="donationRequest.Email" />
                                    <ValidationMessage For="@(() => donationRequest.Email)" />
                                </div>
                                <div class="col-md-2 mb-3">
                                    <label for="mobile" class="form-label">Mobile</label>
                                    <InputText id="mobile" class="form-control" @bind-Value="donationRequest.Mobile" />
                                    <ValidationMessage For="@(() => donationRequest.Mobile)" />
                                </div>
                            </div>
                            <div class="row">
                            </div>

                            <div class="row">
                                <div class="col-md-5 mb-3">
                                    <label for="street" class="form-label">Street</label>
                                    <InputText id="street" class="form-control" @bind-Value="donationRequest.Address.Street" />
                                    <ValidationMessage For="@(() => donationRequest.Address.Street)" />
                                </div>
                                <div class="col-md-3 mb-3">
                                    <label for="city" class="form-label">City</label>
                                    <InputText id="city" class="form-control" @bind-Value="donationRequest.Address.City" />
                                    <ValidationMessage For="@(() => donationRequest.Address.City)" />
                                </div>
                                <div class="col-md-2">
                                    <label for="state" class="form-label">State/Province</label>
                                    <InputSelect id="state" @bind-Value="donationRequest.Address.State" class="form-control">
                                        @foreach (var state in UsStates)
                                        {
                                            <option value="@state.Abbreviation">@state.Name</option>
                                        }
                                    </InputSelect>
                                </div>
                                @*       <div class="col-md-4 mb-3">
                                    <label for="state" class="form-label">State</label>
                                    <InputText id="state" class="form-control" @bind-Value="donationRequest.Address.State" />
                                    <ValidationMessage For="@(() => donationRequest.Address.State)" />
                                </div> *@
                                <div class="col-md-2 mb-3">
                                    <label for="postal" class="form-label">Postal Code</label>
                                    <InputText id="postal" class="form-control" @bind-Value="donationRequest.Address.PostalCode" />
                                    <ValidationMessage For="@(() => donationRequest.Address.PostalCode)" />
                                </div>
                            </div>
                        </div>

                    </div>

                    <div class="card mb-4">
                        <div class="card-header">
                            <h5>Donation Information</h5>
                        </div>
                        <div class="card-body">
                            <div class="row mb-3">
                                <div class="col-md-4">
                                    <label>Amount You Want To Donate:</label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <InputNumber id="amount" class="form-control" @bind-Value="donationRequest.DonationAmount" />
                                    </div>
                                    <ValidationMessage For="@(() => donationRequest.DonationAmount)" />
                                </div>
                                <div class="col-md-4">
                                    <label>Fees we pay @(donationRequest.PayTransactionFee ? "ðŸ˜€" : "ðŸ˜ ")</label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input type="text" class="form-control" value="@(donationRequest.PayTransactionFee ? "0" : @CalculateTransactionFee().ToString("F2"))" disabled />
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <label>Amount we receive:</label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input type="text" class="form-control"
                                               value="@((donationRequest.PayTransactionFee ? donationRequest.DonationAmount : (donationRequest.DonationAmount - CalculateTransactionFee())).ToString("F2"))"
                                               style="@(donationRequest.PayTransactionFee ? "color: green;" : "color: red;")"
                                               disabled />
                                    </div>
                                </div>
                            </div>



                            <div class="mb-3 form-check">
                                <InputCheckbox id="payTransactionFee" class="form-check-input" @bind-Value="donationRequest.PayTransactionFee" />
                                <label class="form-check-label" for="payTransactionFee">
                                    Cover transaction fees (additional @CalculateTransactionFee().ToString("C2")) for total charge of @((donationRequest.DonationAmount + CalculateTransactionFee()).ToString("C2"))
                                </label>
                            </div>

                            <div class="mb-3 form-check">
                                <input type="checkbox" id="isAnnual" class="form-check-input"
                                       checked="@donationRequest.IsAnnual"
                                       @onchange="@(e => SetAnnual((bool)e.Value))" />
                                <label class="form-check-label" for="isAnnual">
                                    Make this an annual recurring donation
                                </label>
                            </div>
                            <div class="mb-3 form-check">
                                <input type="checkbox" id="isMonthly" class="form-check-input"
                                       checked="@donationRequest.IsMonthly"
                                       @onchange="@(e => SetMonthly((bool)e.Value))" />
                                <label class="form-check-label" for="isMonthly">
                                    Make this a monthly recurring donation
                                </label>
                            </div>

                            <div class="mb-3">
                                <label for="donationMessage" class="form-label">Message (Optional)</label>
                                <InputTextArea id="donationMessage" class="form-control" @bind-Value="donationRequest.DonationMessage" rows="3" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Payment Method</label>
                                <div id="dropin-container"></div>
                                <div class="text-danger">@paymentError</div>
                            </div>

                            <div class="mt-4">
                                <button type="submit" class="btn btn-primary" disabled="@(!isPaymentFormReady || isProcessing)">
                                    @if (isProcessing)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-1">Processing...</span>
                                    }
                                    else
                                    {
                                        <span>Donate Now</span>
                                    }
                                </button>
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int? CampaignId { get; set; }

    [Parameter]
    public string? ReferralCode { get; set; }

    private Campaign? campaign;
    private Profile? referrer = new Profile();
    private Organization? organization;
    private string campaignError = "";
    private string referrerError = "";
    private string organizationError = "";
    private bool isLoading = true;
    private string paymentError = "";
    private bool isProcessing = false;
    private bool isPaymentFormReady = false;

    private void SetAnnual(bool value)
    {
        donationRequest.IsAnnual = value;
        if (value)
        {
            donationRequest.IsMonthly = false;
        }
        // No StateHasChanged() needed - Blazor automatically re-renders on @onchange
    }

    private void SetMonthly(bool value)
    {
        donationRequest.IsMonthly = value;
        if (value)
        {
            donationRequest.IsAnnual = false;
        }
        // No StateHasChanged() needed - Blazor automatically re-renders on @onchange
    }

    private DonationRequestDto donationRequest = new DonationRequestDto
    {
        DonationAmount = 50.00m,
        Address = new AddressModel
        {
            Street = string.Empty,
            City = string.Empty,
            State = string.Empty,
            PostalCode = string.Empty
        }
    };

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(
            ProcessReferalCode(),
            LoadCampaignAsync(),
            LoadOrganizationAsync(),
            LoadReferrerAsync()
        );
    }

    private async Task LoadOrganizationAsync()
    {
        try
        {
            // Assuming OrganizationService is injected as a dependency, use it as an instance.
            organization = await OrganizationService.GetByIdAsync(1);

            // If no organization is found, set an error message
            if (organization == null)
            {
                organizationError = "Organization not found.";
            }
        }
        catch (Exception ex)
        {
            organizationError = $"Error loading organization: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }


    private async Task LoadCampaignAsync()
    {
        try
        {
            // If a campaign ID is provided, load that campaign
            if (CampaignId.HasValue)
            {
                campaign = await CampaignService.GetByIdAsync(CampaignId.Value);

                if (campaign == null)
                {
                    campaign = await CampaignService.GetDefaultCampaignAsync();

                    if (campaign == null)
                    {
                        campaignError = "No default campaign is available.";
                    }
                }
                else if (!campaign.IsActive)
                {
                    campaignError = "This campaign is no longer active.";
                    campaign = null;
                }
            }
            // Otherwise, load the default campaign
            else
            {
                campaign = await CampaignService.GetDefaultCampaignAsync();

                if (campaign == null)
                {
                    campaignError = "No default campaign is available.";
                }
            }

            // Update donation info with campaign details if available
            if (campaign != null)
            {
                donationRequest.CampaignCode = campaign.Id.ToString();
            }
        }
        catch (Exception ex)
        {
            campaignError = $"Error loading campaign: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ProcessReferalCode()
    {
        try
        {
            if (!string.IsNullOrEmpty(ReferralCode))
            {
                // first remove all trailing characters after including "-"
                // This is to handle cases like "12345 - Some Campaign Name" and returns "12345"

                ReferralCode = ReferralCode.Split('-')[0].Trim();

                // find numbers at the beginning of the referral code
                var match = System.Text.RegularExpressions.Regex.Match(ReferralCode, @"^\d+");
                if (match.Success)
                {
                    // If a number is found at the start, then remove it from the referral code
                    ReferralCode = ReferralCode.Substring(match.Length).Trim();

                    // If a number is found, treat it as a CampaignId
                    CampaignId = int.Parse(match.Value);
                }
            }
        }
        catch (Exception ex)
        {
            referrerError = $"Error loading referrer information: {ex.Message}";
        }
    }

    private async Task LoadReferrerAsync()
    {
        try
        {
            if (!string.IsNullOrEmpty(ReferralCode))
            {
                // Try to find a profile with this referral code
                referrer = await ProfileService.GetByReferralCodeAsync(ReferralCode);

                if (referrer == null)
                {
                    referrerError = $"Referral code '{ReferralCode}' not found.";
                }
                else
                {
                    // Store the referral code in the donation request
                    donationRequest.ReferralCode = ReferralCode;
                }
            }
        }
        catch (Exception ex)
        {
            referrerError = $"Error loading referrer information: {ex.Message}";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeBraintreeAsync();
        }
    }

    private async Task InitializeBraintreeAsync()
    {
        try
        {
            var braintreeService = PaymentServiceFactory.GetPaymentService("Braintree");
            var tokenResponse = await braintreeService.GenerateClientTokenAsync(new ClientTokenRequest());

            if (tokenResponse.Success)
            {
                await JSRuntime.InvokeVoidAsync("initializeBraintree", tokenResponse.ClientToken, DotNetObjectReference.Create(this));
            }
            else
            {
                paymentError = tokenResponse.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            paymentError = $"Failed to initialize payment form: {ex.Message}";
        }
    }

    [JSInvokable]
    public void SetPaymentFormReady(bool isReady)
    {
        isPaymentFormReady = isReady;
        StateHasChanged();
    }

    [JSInvokable]
    public void SetPaymentNonce(string nonce, string deviceData)
    {
        donationRequest.PaymentToken = nonce;
    }

    private decimal CalculateTransactionFee()
    {
        // Using standard fee calculation from DonationService
        const decimal transactionFeePercentage = 0.0219m; // 2.19%
        const decimal transactionFeeFlat = 0.29m; // $0.29 flat fee

        return Math.Round(donationRequest.DonationAmount * transactionFeePercentage + transactionFeeFlat, 2);
    }

    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(donationRequest.PaymentToken))
        {
            paymentError = "Please complete the payment form";
            return;
        }

        isProcessing = true;
        paymentError = "";

        try
        {
            // Set the transaction fee based on calculation
            if (donationRequest.PayTransactionFee)
            {
                donationRequest.PayTransactionFeeAmount = CalculateTransactionFee();
                donationRequest.DonationAmount += donationRequest.PayTransactionFeeAmount; // Adding the fee to the donation amount
            }

            // Process the donation
            var donation = await DonationService.ProcessDonationAsync(donationRequest);

            if (donation != null && donation.Id > 0)
            {
                await JSRuntime.InvokeVoidAsync("showAlert", "Donation Successful",
                    $"Thank you for your donation of {donation.DonationAmount.ToString("C2")}!");

                // Reset form
                donationRequest = new DonationRequestDto
                {
                    DonationAmount = 10.00m,
                    Address = new AddressModel
                    {
                        Street = string.Empty,
                        City = string.Empty,
                        State = string.Empty,
                        PostalCode = string.Empty
                    }
                };

                // Reset Braintree form
                await JSRuntime.InvokeVoidAsync("resetBraintree");
            }
            else
            {
                paymentError = "Failed to process donation. Please try again.";
            }
        }
        catch (Exception ex)
        {
            paymentError = $"Donation processing error: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    // US States list with abbreviations
    private class StateInfo
    {
        public string Abbreviation { get; set; }
        public string Name { get; set; }
    }

    // Country list with code and name
    private class CountryInfo
    {
        public string Code { get; set; }
        public string Name { get; set; }
    }

    // List of US states for dropdown
    private List<StateInfo> UsStates { get; } = new List<StateInfo>
    {
        new StateInfo { Abbreviation = "AL", Name = "Alabama" },
        new StateInfo { Abbreviation = "AK", Name = "Alaska" },
        new StateInfo { Abbreviation = "AZ", Name = "Arizona" },
        new StateInfo { Abbreviation = "AR", Name = "Arkansas" },
        new StateInfo { Abbreviation = "CA", Name = "California" },
        new StateInfo { Abbreviation = "CO", Name = "Colorado" },
        new StateInfo { Abbreviation = "CT", Name = "Connecticut" },
        new StateInfo { Abbreviation = "DE", Name = "Delaware" },
        new StateInfo { Abbreviation = "FL", Name = "Florida" },
        new StateInfo { Abbreviation = "GA", Name = "Georgia" },
        new StateInfo { Abbreviation = "HI", Name = "Hawaii" },
        new StateInfo { Abbreviation = "ID", Name = "Idaho" },
        new StateInfo { Abbreviation = "IL", Name = "Illinois" },
        new StateInfo { Abbreviation = "IN", Name = "Indiana" },
        new StateInfo { Abbreviation = "IA", Name = "Iowa" },
        new StateInfo { Abbreviation = "KS", Name = "Kansas" },
        new StateInfo { Abbreviation = "KY", Name = "Kentucky" },
        new StateInfo { Abbreviation = "LA", Name = "Louisiana" },
        new StateInfo { Abbreviation = "ME", Name = "Maine" },
        new StateInfo { Abbreviation = "MD", Name = "Maryland" },
        new StateInfo { Abbreviation = "MA", Name = "Massachusetts" },
        new StateInfo { Abbreviation = "MI", Name = "Michigan" },
        new StateInfo { Abbreviation = "MN", Name = "Minnesota" },
        new StateInfo { Abbreviation = "MS", Name = "Mississippi" },
        new StateInfo { Abbreviation = "MO", Name = "Missouri" },
        new StateInfo { Abbreviation = "MT", Name = "Montana" },
        new StateInfo { Abbreviation = "NE", Name = "Nebraska" },
        new StateInfo { Abbreviation = "NV", Name = "Nevada" },
        new StateInfo { Abbreviation = "NH", Name = "New Hampshire" },
        new StateInfo { Abbreviation = "NJ", Name = "New Jersey" },
        new StateInfo { Abbreviation = "NM", Name = "New Mexico" },
        new StateInfo { Abbreviation = "NY", Name = "New York" },
        new StateInfo { Abbreviation = "NC", Name = "North Carolina" },
        new StateInfo { Abbreviation = "ND", Name = "North Dakota" },
        new StateInfo { Abbreviation = "OH", Name = "Ohio" },
        new StateInfo { Abbreviation = "OK", Name = "Oklahoma" },
        new StateInfo { Abbreviation = "OR", Name = "Oregon" },
        new StateInfo { Abbreviation = "PA", Name = "Pennsylvania" },
        new StateInfo { Abbreviation = "RI", Name = "Rhode Island" },
        new StateInfo { Abbreviation = "SC", Name = "South Carolina" },
        new StateInfo { Abbreviation = "SD", Name = "South Dakota" },
        new StateInfo { Abbreviation = "TN", Name = "Tennessee" },
        new StateInfo { Abbreviation = "TX", Name = "Texas" },
        new StateInfo { Abbreviation = "UT", Name = "Utah" },
        new StateInfo { Abbreviation = "VT", Name = "Vermont" },
        new StateInfo { Abbreviation = "VA", Name = "Virginia" },
        new StateInfo { Abbreviation = "WA", Name = "Washington" },
        new StateInfo { Abbreviation = "WV", Name = "West Virginia" },
        new StateInfo { Abbreviation = "WI", Name = "Wisconsin" },
        new StateInfo { Abbreviation = "WY", Name = "Wyoming" },
        new StateInfo { Abbreviation = "DC", Name = "District of Columbia" },
        new StateInfo { Abbreviation = "AS", Name = "American Samoa" },
        new StateInfo { Abbreviation = "GU", Name = "Guam" },
        new StateInfo { Abbreviation = "MP", Name = "Northern Mariana Islands" },
        new StateInfo { Abbreviation = "PR", Name = "Puerto Rico" },
        new StateInfo { Abbreviation = "VI", Name = "U.S. Virgin Islands" }
    };

}
