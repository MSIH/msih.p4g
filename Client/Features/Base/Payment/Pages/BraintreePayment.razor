@* 
 * Copyright (c) 2025 MSIH LLC. All rights reserved.
 * This file is developed for Make Sure It Happens Inc.
 * Unauthorized copying, modification, distribution, or use is prohibited.
 *@
@page "/payment/braintree"
@page "/payment/braintree/{CampaignId:int?}"
@page "/payment/braintree/{CampaignId:int?}/{ReferralCode?}"
@page "/d/{CampaignId:int?}"
@page "/d/{ReferralCode?}"
@page "/d/{CampaignId:int?}/{ReferralCode?}"
@using msih.p4g.Server.Features.Base.PaymentService.Interfaces
@using msih.p4g.Server.Features.Base.PaymentService.Models
@using msih.p4g.Server.Features.CampaignService.Interfaces
@using msih.p4g.Server.Features.CampaignService.Model
@using msih.p4g.Server.Features.Base.ProfileService.Interfaces
@using msih.p4g.Server.Features.Base.ProfileService.Model
@inject IPaymentServiceFactory PaymentServiceFactory
@inject ICampaignService CampaignService
@inject IProfileService ProfileService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="container">
    @if (isLoading)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <h2>Payment</h2>
        
        <div class="row">
            <div class="col-md-8 mx-auto">
                @if (referrer != null)
                {
                    <div class="alert alert-info mb-4">
                        <p class="mb-0">You were referred by: <strong>@referrer.FirstName @(referrer.LastName?.Substring(0, 1)).</strong></p>
                    </div>
                }
                
                @if (campaign != null)
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5>Campaign Information</h5>
                        </div>
                        <div class="card-body">
                            <h4>@campaign.Title</h4>
                            <p class="mb-0">@campaign.Description</p>
                        </div>
                    </div>
                }
                else if (!string.IsNullOrEmpty(campaignError))
                {
                    <div class="alert alert-danger mb-4">
                        @campaignError
                    </div>
                }
                
                <div class="card mb-4">
                    <div class="card-header">
                        <h5>Payment Information</h5>
                    </div>
                    <div class="card-body">
                        <EditForm Model="@paymentInfo" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            
                            <div class="mb-3">
                                <label for="amount" class="form-label">Amount</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <InputNumber id="amount" class="form-control" @bind-Value="paymentInfo.Amount" />
                                </div>
                                <ValidationMessage For="@(() => paymentInfo.Amount)" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <InputText id="description" class="form-control" @bind-Value="paymentInfo.Description" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="email" class="form-label">Email</label>
                                <InputText id="email" class="form-control" @bind-Value="paymentInfo.CustomerEmail" />
                                <ValidationMessage For="@(() => paymentInfo.CustomerEmail)" />
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Payment Method</label>
                                <div id="dropin-container"></div>
                                <div class="text-danger">@paymentError</div>
                            </div>
                            
                            <div class="mt-4">
                                <button type="submit" class="btn btn-primary" disabled="@(!isPaymentFormReady || isProcessing)">
                                    @if (isProcessing)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-1">Processing...</span>
                                    }
                                    else
                                    {
                                        <span>Pay Now</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int? CampaignId { get; set; }
    
    [Parameter]
    public string? ReferralCode { get; set; }
    
    private Campaign? campaign;
    private Profile? referrer;
    private string campaignError = "";
    private string referrerError = "";
    private bool isLoading = true;
    
    private PaymentRequest paymentInfo = new PaymentRequest 
    { 
        Amount = 10.00m, 
        Currency = "USD",
        Description = "Demo Payment" 
    };
    private string paymentError = "";
    private bool isProcessing = false;
    private bool isPaymentFormReady = false;
    
    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(
            LoadCampaignAsync(),
            LoadReferrerAsync()
        );
    }
    
    private async Task LoadCampaignAsync()
    {
        try
        {
            // If a campaign ID is provided, load that campaign
            if (CampaignId.HasValue)
            {
                campaign = await CampaignService.GetByIdAsync(CampaignId.Value);
                
                if (campaign == null)
                {
                    campaignError = $"Campaign with ID {CampaignId.Value} not found.";
                }
                else if (!campaign.IsActive)
                {
                    campaignError = "This campaign is no longer active.";
                    campaign = null;
                }
            }
            // Otherwise, load the default campaign
            else
            {
                campaign = await CampaignService.GetDefaultCampaignAsync();
                
                if (campaign == null)
                {
                    campaignError = "No default campaign is available.";
                }
            }
            
            // Update payment info with campaign details if available
            if (campaign != null)
            {
                paymentInfo.Description = $"Donation to {campaign.Title}";
                paymentInfo.OrderReference = $"Campaign-{campaign.Id}";
            }
        }
        catch (Exception ex)
        {
            campaignError = $"Error loading campaign: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task LoadReferrerAsync()
    {
        try
        {
            if (!string.IsNullOrEmpty(ReferralCode))
            {
                // Try to find a profile with this referral code
                // Since we don't have a direct GetByReferralCode method, we need to get creative
                // This would ideally be a direct method on the ProfileService
                
                // Use available repositories to query by referral code
                // For now, let's assume we have a method to get profile by referral code
                referrer = await GetProfileByReferralCodeAsync(ReferralCode);
                
                if (referrer == null)
                {
                    referrerError = $"Referral code '{ReferralCode}' not found.";
                }
            }
        }
        catch (Exception ex)
        {
            referrerError = $"Error loading referrer information: {ex.Message}";
        }
    }
    
    // Helper method to get a profile by referral code
    // In a real implementation, this would be a method on the ProfileService
    private async Task<Profile?> GetProfileByReferralCodeAsync(string referralCode)
    {
        try
        {
            // This would be implemented in the ProfileService
            // For now, we're making a placeholder method
            
            // Example implementation:
            // 1. Find profiles with matching referral code
            var profiles = await ProfileService.GetAllAsync();
            return profiles.FirstOrDefault(p => p.ReferralCode == referralCode);
        }
        catch (Exception)
        {
            return null;
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeBraintreeAsync();
        }
    }
    
    private async Task InitializeBraintreeAsync()
    {
        try
        {
            var braintreeService = PaymentServiceFactory.GetPaymentService("Braintree");
            var tokenResponse = await braintreeService.GenerateClientTokenAsync(new ClientTokenRequest());
            
            if (tokenResponse.Success)
            {
                await JSRuntime.InvokeVoidAsync("initializeBraintree", tokenResponse.ClientToken, DotNetObjectReference.Create(this));
            }
            else
            {
                paymentError = tokenResponse.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            paymentError = $"Failed to initialize payment form: {ex.Message}";
        }
    }
    
    [JSInvokable]
    public void SetPaymentFormReady(bool isReady)
    {
        isPaymentFormReady = isReady;
        StateHasChanged();
    }
    
    [JSInvokable]
    public void SetPaymentNonce(string nonce, string deviceData)
    {
        paymentInfo.PaymentMethodNonce = nonce;
        paymentInfo.DeviceData = deviceData;
    }
    
    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(paymentInfo.PaymentMethodNonce))
        {
            paymentError = "Please complete the payment form";
            return;
        }
        
        isProcessing = true;
        paymentError = "";
        
        try
        {
            // Add campaign ID to the payment metadata if available
            if (campaign != null)
            {
                if (paymentInfo.OrderReference == null)
                {
                    paymentInfo.OrderReference = $"Campaign-{campaign.Id}";
                }
            }
            
            // Add referral code to the payment metadata if available
            if (!string.IsNullOrEmpty(ReferralCode))
            {
                if (paymentInfo.OrderReference == null)
                {
                    paymentInfo.OrderReference = $"Referral-{ReferralCode}";
                }
                else
                {
                    paymentInfo.OrderReference += $"|Referral-{ReferralCode}";
                }
            }
            
            var braintreeService = PaymentServiceFactory.GetPaymentService("Braintree");
            var response = await braintreeService.ProcessPaymentAsync(paymentInfo);
            
            if (response.Success)
            {
                await JSRuntime.InvokeVoidAsync("showAlert", "Payment Successful", $"Transaction ID: {response.TransactionId}");
                
                // Reset form
                paymentInfo = new PaymentRequest 
                { 
                    Amount = 10.00m, 
                    Currency = "USD",
                    Description = campaign != null ? $"Donation to {campaign.Title}" : "Demo Payment"
                };
                
                // Reset Braintree form
                await JSRuntime.InvokeVoidAsync("resetBraintree");
            }
            else
            {
                paymentError = response.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            paymentError = $"Payment processing error: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }
}
