@*
 * Copyright (c) 2025 MSIH LLC. All rights reserved.
 * This file is developed for Make Sure It Happens Inc.
 * Unauthorized copying, modification, distribution, or use is prohibited.
 *@

@page "/d/{ReferralCode?}"
@page "/give/{ReferralCode?}"
@page "/donate/{ReferralCode?}"
@page "/donate/{CampaignId:int?}"

@using msih.p4g.Server.Features.Base.PaymentService.Interfaces
@using msih.p4g.Server.Features.Base.PaymentService.Models
@using msih.p4g.Server.Features.Base.UserService.Models
@using msih.p4g.Server.Features.CampaignService.Interfaces
@using msih.p4g.Server.Features.CampaignService.Model
@using msih.p4g.Server.Features.Base.ProfileService.Interfaces
@using msih.p4g.Server.Features.Base.ProfileService.Model
@using msih.p4g.Server.Features.DonationService.Models
@using msih.p4g.Server.Features.DonationService.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@using msih.p4g.Server.Features.OrganizationService.Interfaces
@using msih.p4g.Server.Features.OrganizationService.Models
@using msih.p4g.Server.Features.OrganizationService.Services
@using msih.p4g.Shared.Models

@inject IPaymentServiceFactory PaymentServiceFactory
@inject ICampaignService CampaignService
@inject IProfileService ProfileService
@inject IDonationService DonationService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IOrganizationService OrganizationService

<div class="container">
    @if (@isLoading)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {

        @if (showThankYouMessage)
        {
            <div class="row justify-content-center">
                <div class="col-md-8 col-lg-6">
                    <div class="card donation-card">
                        <div class="card-body text-center py-5">
                            <!-- Success Icon -->
                            <div class="success-icon">
                                <i class="fas fa-check-circle"></i>
                            </div>

                            <!-- Main Thank You Message -->
                            <h1 class="display-5 fw-bold text-success mb-3">Thank You!</h1>

                            <!-- Donation Amount -->
                            <p class="lead text-muted mb-4">
                                Your generous donation of <strong class="text-success">@donationRequest.DonationAmount.ToString("C2")</strong> has been successfully processed.
                            </p>

                            <!-- Receipt Information -->
                            <div class="alert alert-info d-flex align-items-center mb-4" role="alert">
                                <i class="fas fa-envelope me-2"></i>
                                <div>
                                    A receipt has been sent to your email address for tax purposes.
                                </div>
                            </div>

                            <!-- Social Sharing Section -->
                            <div class="mb-4">
                                <h5 class="fw-bold mb-3">Help Us Spread the Word</h5>
                                <p class="text-muted mb-3">
                                    You can help even more by sharing this page with your friends and family.
                                </p>

                                @if (isMobile)
                                {
                                    <!-- Mobile: Show Share Button -->
                                    <button class="btn social-share-btn btn-lg px-4 py-2"
                                            @onclick="ShareOnSocial"
                                            disabled="@isSharing">
                                        <i class="fas @shareIcon me-2"></i>
                                        @shareButtonText
                                    </button>
                                }
                                else
                                {
                                    <!-- Desktop: Show Text to Copy -->
                                    <div class="share-text-container">
                                        <p class="text-muted mb-2">
                                            <small>Copy and paste this message into your social media or email:</small>
                                        </p>

                                        <i class="fas fa-copy text-muted me-2"></i>
                                        <span class="share-text">@ShareMessage</span>
                                    </div>
                                }
                            </div>

                            <!-- Divider -->
                            <hr class="my-4">

                            <!-- Contact Information -->
                            <div class="contact-section p-4 text-start">
                                <h5 class="fw-bold mb-3 d-flex align-items-center">
                                    <i class="fas fa-question-circle me-2 text-primary"></i>
                                    Questions?
                                </h5>
                                <p class="mb-2 text-muted">
                                    If you have any questions about your donation, please contact us:
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        else if (showRegistrationMessage)
        {
            <div class="alert alert-info mb-4">
                <p class="mb-0">Thank you for registering! Your participation is greatly appreciated.</p>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col-md-8 mx-auto">
                    <!-- Page Header Card -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">Donate</h5>
                        </div>
                    </div>

                    <!-- Referral Alert -->
                    @if (!string.IsNullOrWhiteSpace(referrer?.FirstName))
                    {
                        <div class="alert alert-info mb-4">
                            <p class="mb-0">
                                You were referred by: <strong>
                                    @referrer.FirstName
                                    @(referrer.LastName?.Substring(0, 1).ToUpper()).
                                </strong>
                            </p>
                        </div>
                    }

                    <!-- Organization Information Card -->
                    @if (campaign != null && organization != null)
                    {
                        <div class="card mb-4">
                            <div class="card-header">
                                <h5 class="mb-0">Organization Information</h5>
                            </div>
                            <div class="card-body">
                                <p class="mb-3">
                                    @organization.LegalName
                                    | Tax Type @organization.OrganizationType
                                    | TaxID @organization.TaxId
                                    |
                                    <a href="@organization.Website" target="_blank" rel="noopener noreferrer">
                                        @organization.Website
                                    </a>
                                </p>
                                <p class="mb-0">
                                    @organization.MissionStatement
                                </p>
                            </div>
                        </div>

                        <!-- Campaign Information Card -->
                        <div class="card mb-4">
                            <div class="card-header">
                                <h5 class="mb-0">Campaign Information</h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="campaignSelect" class="form-label">
                                        <small class="text-muted">Select the campaign for this fundraiser</small>
                                    </label>
                                    <InputSelect id="campaignSelect" class="form-control" @bind-Value="selectedCampaignId">
                                        <option value="">-- Select Campaign --</option>
                                        @foreach (var c in campaigns)
                                        {
                                            <option value="@c.Id">
                                                @c.Title
                                            </option>
                                        }
                                    </InputSelect>
                                </div>
                                <p class="mb-0">
                                    @campaign.Description
                                </p>
                            </div>
                        </div>
                    }

                    <!-- Donation Form -->
                    <EditForm Model="@donationRequest" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />
                        @* <ValidationSummary /> *@

                        <!-- Donor Information Card -->
                        <div class="card mb-4">
                            <div class="card-header">
                                <h5 class="mb-0">Donor Information</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-3 mb-3">
                                        <label for="firstName" class="form-label">First Name*</label>
                                        <InputText id="firstName" class="form-control" @bind-Value="donationRequest.FirstName" />
                                        <ValidationMessage For="@(() => donationRequest.FirstName)" />
                                    </div>
                                    <div class="col-md-3 mb-3">
                                        <label for="lastName" class="form-label">Last Name*</label>
                                        <InputText id="lastName" class="form-control" @bind-Value="donationRequest.LastName" />
                                        <ValidationMessage For="@(() => donationRequest.LastName)" />
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="email" class="form-label">Email*</label>
                                        <InputText id="email" class="form-control" @bind-Value="donationRequest.Email" />
                                        <ValidationMessage For="@(() => donationRequest.Email)" />
                                    </div>
                                    <div class="col-md-2 mb-3 d-flex align-items-end">
                                        <button type="button" class="btn btn-secondary btn-sm" @onclick="RegisterWithoutDonating">Register without donating</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(messageRegistration))
                        {
                            <div class="alert @(messageRegistration.StartsWith("Error") ? "alert-danger" : "alert-success") mb-4">
                                @messageRegistration
                            </div>
                        }
                        <!-- Donation Information Card -->
                        <div class="card mb-4">
                            <div class="card-header">
                                <h5 class="mb-0">Donation Information</h5>
                            </div>
                            <div class="card-body">
                                @if (showButtons)
                                {
                                    <div class="mb-3">
                                        <label class="form-label">Quick Amount Selection:</label>
                                        <div class="d-flex flex-wrap gap-2">
                                            <button type="button" class="btn btn-outline-primary" @onclick="() => SetDonationAmount(50)">$50</button>
                                            <button type="button" class="btn btn-outline-primary" @onclick="() => SetDonationAmount(100)">$100</button>
                                            <button type="button" class="btn btn-outline-primary" @onclick="() => SetDonationAmount(250)">$250</button>
                                            <button type="button" class="btn btn-outline-primary" @onclick="() => SetDonationAmount(500)">$500</button>
                                            <button type="button" class="btn btn-outline-primary" @onclick="() => SetDonationAmount(1000)">$1,000</button>
                                            <button type="button" class="btn btn-outline-primary" @onclick="() => SetDonationAmount(2000)">$2,000</button>
                                            <button type="button" class="btn btn-outline-primary" @onclick="() => SetDonationAmount(5000)">$5,000</button>
                                        </div>
                                    </div>
                                }

                                <div class="row mb-3">
                                    <div class="col-md-4">
                                        <label class="form-label">Amount You Want To Donate:</label>
                                        <div class="input-group">
                                            <span class="input-group-text">$</span>
                                            <InputNumber id="amount" class="form-control" @bind-Value="donationRequest.DonationAmount" step="1" />
                                        </div>
                                       @*  <ValidationMessage For="@(() => donationRequest.DonationAmount)" /> *@
                                        @if (donationRequest.DonationAmount < 25)
                                        {
                                            <small class="text-danger">Minimum donation is $25.00</small>
                                        }
                                    </div>
                                    <div class="col-md-4">
                                        <label class="form-label">Fees we pay @(donationRequest.PayTransactionFee ? "😀" : "😠")</label>
                                        <div class="input-group">
                                            <span class="input-group-text">$</span>
                                            <input type="text" class="form-control" value="@(donationRequest.PayTransactionFee ? "0" : @CalculateTransactionFee().ToString("F2"))" disabled />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <label class="form-label">Amount we receive:</label>
                                        <div class="input-group">
                                            <span class="input-group-text">$</span>
                                            <input type="text" class="form-control"
                                                   value="@((donationRequest.PayTransactionFee ? donationRequest.DonationAmount : (donationRequest.DonationAmount - CalculateTransactionFee())).ToString("F2"))"
                                                   style="@(donationRequest.PayTransactionFee ? "color: green;" : "color: red;")"
                                                   disabled />
                                        </div>
                                    </div>
                                </div>

                                <div class="mb-3 form-check">
                                    <InputCheckbox id="payTransactionFee" class="form-check-input" @bind-Value="donationRequest.PayTransactionFee" />
                                    <label class="form-check-label" for="payTransactionFee">
                                        Cover transaction fees (additional @CalculateTransactionFee().ToString("C2")
                                        ) for total charge of @((donationRequest.DonationAmount + CalculateTransactionFee()).ToString("C2"))
                                    </label>
                                </div>

                                <div class="mb-3 form-check">
                                    <input type="checkbox" id="isAnnual" class="form-check-input"
                                           checked="@donationRequest.IsAnnual"
                                           @onchange="@(e => SetAnnual((bool)e.Value))" />
                                    <label class="form-check-label" for="isAnnual">
                                        Make this an annual recurring donation
                                    </label>
                                </div>

                                <div class="mb-3 form-check">
                                    <input type="checkbox" id="isMonthly" class="form-check-input"
                                           checked="@donationRequest.IsMonthly"
                                           @onchange="@(e => SetMonthly((bool)e.Value))" />
                                    <label class="form-check-label" for="isMonthly">
                                        Make this a monthly recurring donation
                                    </label>
                                </div>

                                <div class="mb-0">
                                    <label for="donationMessage" class="form-label">Message (Optional)</label>
                                    <InputTextArea id="donationMessage" class="form-control" @bind-Value="donationRequest.DonationMessage" rows="1" />
                                </div>
                            </div>
                        </div>

                        <!-- Payment Method Card -->
                        <div class="card mb-4">
                            <div class="card-header">
                                <h5 class="mb-0">Payment Method</h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <div id="dropin-container"></div>
                                    <div class="text-danger">
                                        @paymentError
                                    </div>
                                </div>

                                <div class="d-grid">
                                    <button type="submit" class="btn btn-primary" disabled="@(!isPaymentFormReady || isProcessing)">
                                        @if (isProcessing)
                                        {
                                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                            <span class="ms-1">Processing...</span>
                                        }
                                        else
                                        {
                                            <span>Donate Now</span>
                                        }
                                    </button>
                                </div>
                                @if (!string.IsNullOrEmpty(message))
                                {
                                    <div class="alert @(message.StartsWith("Error") ? "alert-danger" : "alert-success") mb-4">
                                        @message
                                    </div>
                                }
                            </div>
                        </div>
                    </EditForm>

                </div>
            </div>
        }


    }
</div>

@code {
    [Parameter]
    public int? CampaignId { get; set; }

    [Parameter]
    public string? ReferralCode { get; set; }

    private bool showRegistrationMessage = false;
    private bool isSharing = false;
    private bool isMobile = false;
    private bool showCopiedMessage = false;
    private string shareButtonText = "Share with Friends";
    private string shareIcon = "fa-share-alt";
    private bool showThankYouMessage = false;
    private bool showButtons = true;
    private string message = string.Empty;
    private string messageRegistration = string.Empty;
    private string ShareMessage => $"I just made a donation to support a great cause! {OrganizationUrl} Join me in making a difference. #Donation #MakeADifference";
    private string OrganizationUrl = "https://msih.org/donate"; // Replace with actual organization URL
    private Campaign? campaign;
    private Profile? referrer = new Profile();
    private Organization? organization;
    private string campaignError = "";
    private string referrerError = "";
    private string organizationError = "";
    private bool isLoading = true;
    private string paymentError = "";
    private bool isProcessing = false;
    private bool isPaymentFormReady = false;
    private IEnumerable<Campaign> campaigns = Enumerable.Empty<Campaign>();

    private int? _selectedCampaignId;
    private int? selectedCampaignId
    {
        get => _selectedCampaignId;
        set
        {
            if (_selectedCampaignId != value)
            {
                _selectedCampaignId = value;
                UpdateSelectedCampaign();
            }
        }
    }


    /// <summary>
    /// Handles user registration without requiring a donation.
    /// </summary>
    private async Task RegisterWithoutDonating()
    {

        // Process donor registration
        var registrationResult = await DonationService.ProcessDonorRegistrationAsync(donationRequest);

        if (registrationResult == DonorRegistrationResultType.NewCreated)
        {

            showRegistrationMessage = true;
        }
        else if (registrationResult == DonorRegistrationResultType.ExistingFound)
        {
            messageRegistration = "Welcome back! You already have an account";
        }
        else
        {
            messageRegistration = "Error Registration failed. Something went wrong. Please try again.";
        }

    }

    private void UpdateSelectedCampaign()
    {
        if (selectedCampaignId.HasValue)
        {
            campaign = campaigns.FirstOrDefault(c => c.Id == selectedCampaignId.Value);
            if (campaign != null)
            {
                donationRequest.CampaignCode = campaign.Id.ToString();
            }
        }
        else
        {
            campaign = null;
            donationRequest.CampaignCode = null;
        }
        StateHasChanged();
    }

    private async Task OnCampaignChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var id))
        {
            // selectedCampaignId is already updated by @bind-Value
            campaign = campaigns.FirstOrDefault(c => c.Id == id);
            if (campaign != null)
            {
                donationRequest.CampaignCode = campaign.Id.ToString();
            }
        }
        else
        {
            campaign = null;
            donationRequest.CampaignCode = null;
        }
        StateHasChanged(); // Ensure UI updates
    }

    private void SetAnnual(bool value)
    {
        donationRequest.IsAnnual = value;
        if (value)
        {
            donationRequest.IsMonthly = false;
        }
        // No StateHasChanged() needed - Blazor automatically re-renders on @onchange
    }

    private void SetMonthly(bool value)
    {
        donationRequest.IsMonthly = value;
        if (value)
        {
            donationRequest.IsAnnual = false;
        }
        // No StateHasChanged() needed - Blazor automatically re-renders on @onchange
    }

    private DonationRequestDto donationRequest = new DonationRequestDto
    {
        DonationAmount = 100m,
        Address = new AddressModel
        {
            Street = string.Empty,
            City = string.Empty,
            State = string.Empty,
            PostalCode = string.Empty
        }
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Process referral code first (doesn't require DB calls)
            await ProcessReferralCode();

            // Execute database operations sequentially to avoid DbContext concurrency issues
            await LoadOrganizationAsync();
            await LoadAllCampaignAsync();
            await LoadReferrerAsync();

            // Find the appropriate campaign
            if (CampaignId.HasValue)
            {
                campaign = campaigns.FirstOrDefault(c => c.Id == CampaignId.Value);
            }

            // Fall back to default if no specific campaign found
            if (campaign == null)
            {
                campaign = campaigns.FirstOrDefault(c => c.IsDefault) ?? campaigns.FirstOrDefault();
            }

            selectedCampaignId = campaign?.Id;

            if (campaign != null)
            {
                donationRequest.CampaignCode = campaign.Id.ToString();
            }
        }
        catch (Exception ex)
        {
            // Log the exception and show user-friendly error
            paymentError = $"Failed to load page data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadOrganizationAsync()
    {
        try
        {
            // Assuming OrganizationService is injected as a dependency, use it as an instance.
            organization = await OrganizationService.GetByIdAsync(1);

            // If no organization is found, set an error message
            if (organization == null)
            {
                organizationError = "Organization not found.";
            }
        }
        catch (Exception ex)
        {
            organizationError = $"Error loading organization: {ex.Message}";
        }
    }

    private async Task LoadAllCampaignAsync()
    {
        try
        {
            campaigns = await CampaignService.GetAllAsync();
            if (campaigns == null || !campaigns.Any())
            {
                campaignError = "No campaigns available.";
            }

        }
        catch (Exception ex)
        {
            campaignError = $"Error loading campaign: {ex.Message}";
        }
    }


    private async Task LoadCampaignAsync()
    {
        try
        {
            // If a campaign ID is provided, load that campaign
            if (CampaignId.HasValue)
            {
                campaign = await CampaignService.GetByIdAsync(CampaignId.Value);

                if (campaign == null)
                {
                    campaign = await CampaignService.GetDefaultCampaignAsync();

                    if (campaign == null)
                    {
                        campaignError = "No default campaign is available.";
                    }
                }
                else if (!campaign.IsActive)
                {
                    campaignError = "This campaign is no longer active.";
                    campaign = null;
                }
            }
            // Otherwise, load the default campaign
            else
            {
                campaign = await CampaignService.GetDefaultCampaignAsync();

                if (campaign == null)
                {
                    campaignError = "No default campaign is available.";
                }
            }

            // Update donation info with campaign details if available
            if (campaign != null)
            {
                donationRequest.CampaignCode = campaign.Id.ToString();
            }
        }
        catch (Exception ex)
        {
            campaignError = $"Error loading campaign: {ex.Message}";
        }
    }

    private async Task ProcessReferralCode()
    {
        try
        {
            if (!string.IsNullOrEmpty(ReferralCode))
            {
                // first remove all trailing characters after including "-"
                // This is to handle cases like "12345 - Some Campaign Name" and returns "12345"

                ReferralCode = ReferralCode.Split('-')[0].Trim();

                // find numbers at the beginning of the referral code
                var match = System.Text.RegularExpressions.Regex.Match(ReferralCode, @"^\d+");
                if (match.Success)
                {
                    // If a number is found at the start, then remove it from the referral code
                    ReferralCode = ReferralCode.Substring(match.Length).Trim();

                    // If a number is found, treat it as a CampaignId
                    CampaignId = int.Parse(match.Value);
                }
            }
        }
        catch (Exception ex)
        {
            referrerError = $"Error processing referral code: {ex.Message}";
        }
    }

    private async Task LoadReferrerAsync()
    {
        try
        {
            if (!string.IsNullOrEmpty(ReferralCode))
            {
                // Try to find a profile with this referral code
                referrer = await ProfileService.GetByReferralCodeAsync(ReferralCode);

                if (referrer == null)
                {
                    referrerError = $"Referral code '{ReferralCode}' not found.";
                }
                else
                {
                    // Store the referral code in the donation request
                    donationRequest.ReferralCode = ReferralCode;
                }
            }
        }
        catch (Exception ex)
        {
            referrerError = $"Error loading referrer information: {ex.Message}";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeBraintreeAsync();
            // Detect if device is mobile
            isMobile = await JSRuntime.InvokeAsync<bool>("eval",
                "/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)");
            StateHasChanged();
        }
    }


    private async Task ShareOnSocial()
    {
        if (isSharing || !isMobile) return;

        isSharing = true;

        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.share", new
            {
                title = "I Made a Donation!",
                text = ShareMessage,
                url = OrganizationUrl
            });
        }
        catch (Exception ex)
        {
            // If native share fails, fall back to clipboard
            Console.WriteLine($"Share failed: {ex.Message}");
        }
        finally
        {
            isSharing = false;
        }
    }

    private async Task InitializeBraintreeAsync()
    {
        try
        {
            var braintreeService = PaymentServiceFactory.GetPaymentService("Braintree");
            var tokenResponse = await braintreeService.GenerateClientTokenAsync(new ClientTokenRequest());

            if (tokenResponse.Success)
            {
                await JSRuntime.InvokeVoidAsync("initializeBraintree", tokenResponse.ClientToken, DotNetObjectReference.Create(this));
            }
            else
            {
                paymentError = tokenResponse.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            paymentError = $"Failed to initialize payment form: {ex.Message}";
        }
    }

    [JSInvokable]
    public void SetPaymentFormReady(bool isReady)
    {
        isPaymentFormReady = isReady;
        StateHasChanged();
    }

    [JSInvokable]
    public void SetPaymentNonce(string nonce, string deviceData)
    {
        donationRequest.PaymentToken = nonce;
    }

    private decimal CalculateTransactionFee()
    {
        // Using standard fee calculation from DonationService
        const decimal transactionFeePercentage = 0.0219m; // 2.19%
        const decimal transactionFeeFlat = 0.29m; // $0.29 flat fee

        return Math.Round(donationRequest.DonationAmount * transactionFeePercentage + transactionFeeFlat, 2);
    }

    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(donationRequest.PaymentToken))
        {
            paymentError = "Please complete the payment form";
            return;
        }

        isProcessing = true;
        paymentError = "";

        try
        {
            // Set the transaction fee based on calculation
            if (donationRequest.PayTransactionFee)
            {
                donationRequest.PayTransactionFeeAmount = CalculateTransactionFee();
                donationRequest.DonationAmount += donationRequest.PayTransactionFeeAmount; // Adding the fee to the donation amount
            }

            // Process the donation
            var donation = await DonationService.ProcessDonationAsync(donationRequest);

            if (donation != null && donation.Id > 0)
            {
                //  $"Thank you for your donation of {donation.DonationAmount.ToString("C2")}!");
                showThankYouMessage = true;
                StateHasChanged();
                // // Reset form
                // donationRequest = new DonationRequestDto
                // {
                //     DonationAmount = 100m,
                //     Address = new AddressModel
                //     {
                //         Street = string.Empty,
                //         City = string.Empty,
                //         State = string.Empty,
                //         PostalCode = string.Empty
                //     }
                // };

                // // Reset Braintree form
                // await JSRuntime.InvokeVoidAsync("resetBraintree");
            }
            else
            {
                message = "Failed to process donation. Please try again.";
            }
        }
        catch (Exception ex)
        {
            message = $"Donation processing error: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Sets the donation amount to the specified value when a quick amount button is clicked.
    /// </summary>
    /// <param name="amount">The donation amount to set</param>
    private void SetDonationAmount(decimal amount)
    {
        donationRequest.DonationAmount = amount;
        StateHasChanged();
    }

    // US States list with abbreviations
    private class StateInfo
    {
        public string Abbreviation { get; set; }
        public string Name { get; set; }
    }

    // Country list with code and name
    private class CountryInfo
    {
        public string Code { get; set; }
        public string Name { get; set; }
    }

    // List of US states for dropdown
    private List<StateInfo> UsStates { get; } = new List<StateInfo>
    {
        new StateInfo { Abbreviation = "AL", Name = "Alabama" },
        new StateInfo { Abbreviation = "AK", Name = "Alaska" },
        new StateInfo { Abbreviation = "AZ", Name = "Arizona" },
        new StateInfo { Abbreviation = "AR", Name = "Arkansas" },
        new StateInfo { Abbreviation = "CA", Name = "California" },
        new StateInfo { Abbreviation = "CO", Name = "Colorado" },
        new StateInfo { Abbreviation = "CT", Name = "Connecticut" },
        new StateInfo { Abbreviation = "DE", Name = "Delaware" },
        new StateInfo { Abbreviation = "FL", Name = "Florida" },
        new StateInfo { Abbreviation = "GA", Name = "Georgia" },
        new StateInfo { Abbreviation = "HI", Name = "Hawaii" },
        new StateInfo { Abbreviation = "ID", Name = "Idaho" },
        new StateInfo { Abbreviation = "IL", Name = "Illinois" },
        new StateInfo { Abbreviation = "IN", Name = "Indiana" },
        new StateInfo { Abbreviation = "IA", Name = "Iowa" },
        new StateInfo { Abbreviation = "KS", Name = "Kansas" },
        new StateInfo { Abbreviation = "KY", Name = "Kentucky" },
        new StateInfo { Abbreviation = "LA", Name = "Louisiana" },
        new StateInfo { Abbreviation = "ME", Name = "Maine" },
        new StateInfo { Abbreviation = "MD", Name = "Maryland" },
        new StateInfo { Abbreviation = "MA", Name = "Massachusetts" },
        new StateInfo { Abbreviation = "MI", Name = "Michigan" },
        new StateInfo { Abbreviation = "MN", Name = "Minnesota" },
        new StateInfo { Abbreviation = "MS", Name = "Mississippi" },
        new StateInfo { Abbreviation = "MO", Name = "Missouri" },
        new StateInfo { Abbreviation = "MT", Name = "Montana" },
        new StateInfo { Abbreviation = "NE", Name = "Nebraska" },
        new StateInfo { Abbreviation = "NV", Name = "Nevada" },
        new StateInfo { Abbreviation = "NH", Name = "New Hampshire" },
        new StateInfo { Abbreviation = "NJ", Name = "New Jersey" },
        new StateInfo { Abbreviation = "NM", Name = "New Mexico" },
        new StateInfo { Abbreviation = "NY", Name = "New York" },
        new StateInfo { Abbreviation = "NC", Name = "North Carolina" },
        new StateInfo { Abbreviation = "ND", Name = "North Dakota" },
        new StateInfo { Abbreviation = "OH", Name = "Ohio" },
        new StateInfo { Abbreviation = "OK", Name = "Oklahoma" },
        new StateInfo { Abbreviation = "OR", Name = "Oregon" },
        new StateInfo { Abbreviation = "PA", Name = "Pennsylvania" },
        new StateInfo { Abbreviation = "RI", Name = "Rhode Island" },
        new StateInfo { Abbreviation = "SC", Name = "South Carolina" },
        new StateInfo { Abbreviation = "SD", Name = "South Dakota" },
        new StateInfo { Abbreviation = "TN", Name = "Tennessee" },
        new StateInfo { Abbreviation = "TX", Name = "Texas" },
        new StateInfo { Abbreviation = "UT", Name = "Utah" },
        new StateInfo { Abbreviation = "VT", Name = "Vermont" },
        new StateInfo { Abbreviation = "VA", Name = "Virginia" },
        new StateInfo { Abbreviation = "WA", Name = "Washington" },
        new StateInfo { Abbreviation = "WV", Name = "West Virginia" },
        new StateInfo { Abbreviation = "WI", Name = "Wisconsin" },
        new StateInfo { Abbreviation = "WY", Name = "Wyoming" },
        new StateInfo { Abbreviation = "DC", Name = "District of Columbia" },
        new StateInfo { Abbreviation = "AS", Name = "American Samoa" },
        new StateInfo { Abbreviation = "GU", Name = "Guam" },
        new StateInfo { Abbreviation = "MP", Name = "Northern Mariana Islands" },
        new StateInfo { Abbreviation = "PR", Name = "Puerto Rico" },
        new StateInfo { Abbreviation = "VI", Name = "U.S. Virgin Islands" }
    };

    /// <summary>
    /// Handles errors from the ReferralLinkComponent
    /// </summary>
    private Task HandleReferralError(string errorMessage)
    {
        message = errorMessage;
        StateHasChanged();
        return Task.CompletedTask;
    }

}
