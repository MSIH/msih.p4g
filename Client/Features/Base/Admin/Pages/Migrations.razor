@* 
 * Copyright (c) 2025 MSIH LLC. All rights reserved.
 * This file is developed for Make Sure It Happens Inc.
 * Unauthorized copying, modification, distribution, or use is prohibited.
 *@

@page "/admin/migrations"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@using msih.p4g.Server.Common.Data
@inject IServiceProvider ServiceProvider

<h3>Database Migrations</h3>

<div class="row mb-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                Database Migrations
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label for="migrationName" class="form-label">Migration Name</label>
                    <input @bind="MigrationName" type="text" class="form-control" id="migrationName" placeholder="InitialCreate" />
                </div>
                <button @onclick="AddMigration" class="btn btn-primary me-2" disabled="@IsBusy">
                    @if (IsBusy)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>Working...</span>
                    }
                    else
                    {
                        <span>Add Migration</span>
                    }
                </button>
                <button @onclick="ApplyMigrations" class="btn btn-success" disabled="@IsBusy">
                    @if (IsBusy)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>Working...</span>
                    }
                    else
                    {
                        <span>Apply Migrations</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert @MessageClass">
        @((MarkupString)Message)
    </div>
}

@if (PendingMigrations?.Any() == true)
{
    <div class="row">
        <div class="col-md-6">
            <div class="card mt-4">
                <div class="card-header">
                    Pending Migrations
                </div>
                <div class="card-body">
                    <ul class="list-group">
                        @foreach (var migration in PendingMigrations)
                        {
                            <li class="list-group-item">@migration</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string MigrationName { get; set; } = "";
    private string Message { get; set; } = "";
    private string MessageClass { get; set; } = "alert-info";
    private bool IsBusy { get; set; } = false;
    private IEnumerable<string> PendingMigrations { get; set; } = Enumerable.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        await LoadPendingMigrations();
    }

    private async Task LoadPendingMigrations()
    {
        try
        {
            using var scope = ServiceProvider.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            PendingMigrations = await dbContext.Database.GetPendingMigrationsAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowError($"Error loading pending migrations: {ex.Message}");
        }
    }

    private async Task AddMigration()
    {
        if (string.IsNullOrWhiteSpace(MigrationName))
        {
            ShowError("Please enter a migration name");
            return;
        }

        IsBusy = true;
        Message = "";

        try
        {
            // In a real application, you'd need to use a background service or API call
            // EF Core migrations can't be directly added from the application
            ShowInfo("Migration functionality would be implemented here.<br/>In a real application, you should use the EF Core CLI tools or Package Manager Console to add migrations.");
        }
        catch (Exception ex)
        {
            ShowError($"Error adding migration: {ex.Message}");
        }
        finally
        {
            IsBusy = false;
        }
    }

    private async Task ApplyMigrations()
    {
        IsBusy = true;
        Message = "";

        try
        {
            using var scope = ServiceProvider.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            await dbContext.Database.MigrateAsync();
            await LoadPendingMigrations();
            ShowSuccess("Migrations applied successfully!");
        }
        catch (Exception ex)
        {
            ShowError($"Error applying migrations: {ex.Message}");
        }
        finally
        {
            IsBusy = false;
        }
    }

    private void ShowError(string message)
    {
        Message = message;
        MessageClass = "alert-danger";
    }

    private void ShowSuccess(string message)
    {
        Message = message;
        MessageClass = "alert-success";
    }

    private void ShowInfo(string message)
    {
        Message = message;
        MessageClass = "alert-info";
    }
}
