@* 
 * Copyright (c) 2025 MSIH LLC. All rights reserved.
 * This file is developed for Make Sure It Happens Inc.
 * Unauthorized copying, modification, distribution, or use is prohibited.
 *@

@page "/admin/message-templates"
@layout AdminLayout

@namespace msih.p4g.Client.Features.Base.Admin.Pages

@using msih.p4g.Server.Features.Base.MessageService.Models
@using msih.p4g.Server.Features.Base.MessageService.Interfaces
@using msih.p4g.Server.Features.Base.MessageService.Utilities
@inject IMessageService MessageService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthorizationService AuthorizationService

<h3>Message Templates</h3>

<div class="mb-4">
    <p>Manage message templates for email and SMS communications. Templates can include placeholders that will be replaced with actual values when messages are sent.</p>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="row mb-3">
        <div class="col-md-8">
            <div class="input-group">
                <span class="input-group-text">
                    <i class="bi bi-search"></i>
                </span>
                <input type="text" class="form-control" placeholder="Search templates..." @bind="searchTerm" @bind:event="oninput" />
                <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                    Filter: @(selectedType == null ? "All Types" : selectedType)
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li><button class="dropdown-item" @onclick="() => FilterByType(null)">All Types</button></li>
                    <li><button class="dropdown-item" @onclick="() => FilterByType(EMAIL_TYPE)">Email</button></li>
                    <li><button class="dropdown-item" @onclick="() => FilterByType(SMS_TYPE)">SMS</button></li>
                </ul>
            </div>
        </div>
        <div class="col-md-4 text-end">
            <button class="btn btn-primary" @onclick="CreateTemplate">
                <i class="bi bi-plus-circle"></i> New Template
            </button>
        </div>
    </div>

    @if (!filteredTemplates.Any())
    {
        <div class="alert alert-info">
            @if (!templates.Any())
            {
                <p>No message templates found. Click "New Template" to create one.</p>
            }
            else
            {
                <p>No templates match your search criteria.</p>
            }
        </div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var template in filteredTemplates)
            {
                <div class="col">
                    <div class="card h-100 @(template.IsDefault ? "border-primary" : "")">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <div>
                                <span class="badge bg-@(template.MessageType == EMAIL_TYPE ? "primary" : "success") me-2">
                                    @template.MessageType
                                </span>
                                @if (template.IsDefault)
                                {
                                    <span class="badge bg-info">Default</span>
                                }
                            </div>
                            <div class="dropdown">
                                <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="dropdown">
                                    <i class="bi bi-three-dots-vertical"></i>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li><button class="dropdown-item" @onclick="() => EditTemplate(template)">Edit</button></li>
                                    <li><button class="dropdown-item" @onclick="() => PreviewTemplate(template)">Preview</button></li>
                                    @if (!template.IsDefault)
                                    {
                                        <li><button class="dropdown-item" @onclick="() => SetAsDefault(template)">Set as Default</button></li>
                                    }
                                    <li><hr class="dropdown-divider"></li>
                                    <li><button class="dropdown-item text-danger" @onclick="() => DeleteTemplate(template)">Delete</button></li>
                                </ul>
                            </div>
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">@template.Name</h5>
                            <h6 class="card-subtitle mb-2 text-muted">@template.Category</h6>
                            <p class="card-text">@(template.Description.Length > 100 ? template.Description.Substring(0, 100) + "..." : template.Description)</p>
                            
                            @if (!string.IsNullOrEmpty(template.AvailablePlaceholders))
                            {
                                <div class="mt-2">
                                    <small class="text-muted">Placeholders:</small>
                                    <div class="mt-1">
                                        @foreach (var placeholder in template.AvailablePlaceholders.Split(',', StringSplitOptions.RemoveEmptyEntries))
                                        {
                                            <span class="badge bg-light text-dark me-1 mb-1">{{@placeholder.Trim()}}</span>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="card-footer d-flex justify-content-between">
                            <small class="text-muted">Created: @template.CreatedOn.ToString("g")</small>
                            <button class="btn btn-sm btn-primary" @onclick="() => EditTemplate(template)">
                                <i class="bi bi-pencil"></i> Edit
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    @if (showDeleteModal)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete the template "<strong>@templateToDelete?.Name</strong>"?</p>
                        <p class="text-danger">This action cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteTemplate">Delete</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    @if (showPreviewModal && previewTemplate != null)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Preview: @previewTemplate.Name</h5>
                        <button type="button" class="btn-close" @onclick="ClosePreviewModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <h6>Template with Placeholders</h6>
                                <div class="border p-3 bg-light" style="max-height: 300px; overflow-y: auto;">
                                    @if (previewTemplate.IsHtml)
                                    {
                                        <div class="preview-html">@((MarkupString)previewTemplate.TemplateContent)</div>
                                    }
                                    else
                                    {
                                        <pre class="mb-0">@previewTemplate.TemplateContent</pre>
                                    }
                                </div>
                            </div>
                            <div class="col-md-6">
                                <h6>Processed Preview</h6>
                                <div class="border p-3 @(previewTemplate.IsHtml ? "preview-html" : "")" style="max-height: 300px; overflow-y: auto;">
                                    @if (string.IsNullOrEmpty(previewProcessedContent))
                                    {
                                        <div class="text-muted">Add placeholder values to see preview</div>
                                    }
                                    else if (previewTemplate.IsHtml)
                                    {
                                        <div class="preview-html">@((MarkupString)previewProcessedContent)</div>
                                    }
                                    else
                                    {
                                        <pre class="mb-0">@previewProcessedContent</pre>
                                    }
                                </div>
                            </div>
                        </div>

                        <h6>Placeholder Values</h6>
                        <div class="row">
                            @foreach (var placeholder in TemplateProcessor.ExtractPlaceholders(previewTemplate.TemplateContent))
                            {
                                <div class="col-md-6 mb-2">
                                    <div class="input-group">
                                        <span class="input-group-text">{{@placeholder}}</span>
                                        <input type="text" class="form-control" 
                                               placeholder="Value" 
                                               @bind="previewPlaceholderValues[placeholder]" 
                                               @bind:after="UpdatePreview" />
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="ClosePreviewModal">Close</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
}

@code {
    private const string EMAIL_TYPE = "Email";
    private const string SMS_TYPE = "SMS";

    private List<MessageTemplate> templates = new();
    private IEnumerable<MessageTemplate> filteredTemplates => FilterTemplates();
    private bool isLoading = true;
    private string searchTerm = "";
    private string? selectedType = null;

    // Delete confirmation
    private bool showDeleteModal = false;
    private MessageTemplate? templateToDelete;

    // Preview modal
    private bool showPreviewModal = false;
    private MessageTemplate? previewTemplate;
    private Dictionary<string, string> previewPlaceholderValues = new();
    private string previewProcessedContent = "";

    protected override async Task OnInitializedAsync()
    {
  
        await LoadTemplatesAsync();
    }

    private async Task LoadTemplatesAsync()
    {
        isLoading = true;
        try
        {
            var allTemplates = await MessageService.GetAllTemplatesAsync();
            templates = allTemplates.OrderByDescending(t => t.IsDefault)
                                   .ThenBy(t => t.Category)
                                   .ThenBy(t => t.Name)
                                   .ToList();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading templates: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private IEnumerable<MessageTemplate> FilterTemplates()
    {
        var filtered = templates.AsEnumerable();

        // Filter by type
        if (!string.IsNullOrEmpty(selectedType))
        {
            filtered = filtered.Where(t => t.MessageType == selectedType);
        }

        // Filter by search term
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(t => 
                t.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                t.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                t.Category.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                t.AvailablePlaceholders.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            );
        }

        return filtered;
    }

    private void FilterByType(string? type)
    {
        selectedType = type;
    }

    private void CreateTemplate()
    {
        NavigationManager.NavigateTo("/admin/message-templates/new");
    }

    private void EditTemplate(MessageTemplate template)
    {
        NavigationManager.NavigateTo($"/admin/message-templates/edit/{template.Id}");
    }

    private async Task SetAsDefault(MessageTemplate template)
    {
        try
        {
            bool success = await MessageService.SetTemplateAsDefaultAsync(template.Id);
            if (success)
            {
                // Update local data
                foreach (var t in templates.Where(t => t.Category == template.Category && t.MessageType == template.MessageType))
                {
                    t.IsDefault = t.Id == template.Id;
                }
                await JSRuntime.InvokeVoidAsync("alert", $"Template '{template.Name}' is now the default for {template.Category} {template.MessageType} messages.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error setting template as default: {ex.Message}");
        }
    }

    private void DeleteTemplate(MessageTemplate template)
    {
        templateToDelete = template;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        templateToDelete = null;
    }

    private async Task ConfirmDeleteTemplate()
    {
        if (templateToDelete == null) return;

        try
        {
            await MessageService.DeleteTemplateAsync(templateToDelete.Id);
            templates.Remove(templateToDelete);
            CloseDeleteModal();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error deleting template: {ex.Message}");
        }
    }

    private void PreviewTemplate(MessageTemplate template)
    {
        previewTemplate = template;
        previewPlaceholderValues = new Dictionary<string, string>();
        previewProcessedContent = "";
        showPreviewModal = true;
    }

    private void ClosePreviewModal()
    {
        showPreviewModal = false;
        previewTemplate = null;
    }

    private void UpdatePreview()
    {
        if (previewTemplate == null) return;
        
        previewProcessedContent = TemplateProcessor.ProcessTemplate(
            previewTemplate.TemplateContent, 
            previewPlaceholderValues
        );
    }
}

<style>
    .preview-html {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    }
</style>
