@* EXAMPLE: How to use the parent-child recurring donation structure in Blazor components *@
@page "/my-donations-example"
@inject IDonationService DonationService

<h3>My Donations</h3>

@if (donations == null)
{
    <p>Loading...</p>
}
else
{
    <div class="donations-list">
        @foreach (var donation in donations.OrderByDescending(d => d.CreatedOn))
        {
            <div class="donation-item">
                @if (DonationService.IsRecurringSetupDonation(donation))
                {
                    @* This is a recurring donation setup - user can manage this *@
                    <div class="recurring-setup">
                        <strong>@donation.CreatedOn.ToString("MMM dd"): $@donation.DonationAmount @GetFrequencyText(donation) Donation (Setup)</strong>
                        <div class="recurring-actions">
                            <button @onclick="() => UpdateRecurring(donation.Id)">Update Payment Method</button>
                            <button @onclick="() => CancelRecurring(donation.Id)">Cancel</button>
                        </div>
                        @if (donation.NextProcessDate.HasValue)
                        {
                            <small>Next payment: @donation.NextProcessDate.Value.ToString("MMM dd, yyyy")</small>
                        }
                    </div>
                }
                else if (DonationService.IsRecurringPaymentRecord(donation))
                {
                    @* This is an automatic payment - user sees it but cannot manage it individually *@
                    <div class="recurring-payment">
                        @donation.CreatedOn.ToString("MMM dd"): $@donation.DonationAmount @GetFrequencyText(donation) Donation (Payment @GetPaymentNumber(donation))
                        <small>Automatic payment</small>
                    </div>
                }
                else
                {
                    @* This is a one-time donation *@
                    <div class="one-time-donation">
                        @donation.CreatedOn.ToString("MMM dd"): $@donation.DonationAmount One-time Donation
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    private List<Donation> donations;

    protected override async Task OnInitializedAsync()
    {
        // Get all donations for the user (includes both setup and payment records)
        donations = await DonationService.GetByUserEmailAsync("user@example.com");
    }

    private string GetFrequencyText(Donation donation)
    {
        if (donation.ParentRecurringDonation != null)
        {
            // This is a payment record, get frequency from parent
            return donation.ParentRecurringDonation.IsMonthly ? "Monthly" : "Annual";
        }
        return donation.IsMonthly ? "Monthly" : "Annual";
    }

    private int GetPaymentNumber(Donation paymentRecord)
    {
        if (paymentRecord.ParentRecurringDonationId.HasValue)
        {
            // Count how many payments have been made for this recurring donation
            var siblingPayments = donations.Where(d => 
                d.ParentRecurringDonationId == paymentRecord.ParentRecurringDonationId)
                .OrderBy(d => d.CreatedOn)
                .ToList();
            
            return siblingPayments.IndexOf(paymentRecord) + 1;
        }
        return 0;
    }

    private async Task UpdateRecurring(int donationId)
    {
        // User can only update the setup donation, not individual payments
        // This would open a payment method update modal
        Console.WriteLine($"Update recurring donation setup {donationId}");
    }

    private async Task CancelRecurring(int donationId)
    {
        // Cancel the recurring donation setup - this stops future payments
        var success = await DonationService.CancelRecurringDonationAsync("user@example.com", donationId);
        if (success)
        {
            // Refresh the list
            donations = await DonationService.GetByUserEmailAsync("user@example.com");
            StateHasChanged();
        }
    }
}

<style>
    .donation-item {
        border: 1px solid #ddd;
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 5px;
    }

    .recurring-setup {
        background-color: #e8f5e8;
    }

    .recurring-payment {
        background-color: #f8f8f8;
        margin-left: 20px;
    }

    .one-time-donation {
        background-color: #fff;
    }

    .recurring-actions {
        margin-top: 10px;
    }

    .recurring-actions button {
        margin-right: 10px;
        padding: 5px 10px;
        border: 1px solid #ccc;
        background: white;
        cursor: pointer;
    }
</style>